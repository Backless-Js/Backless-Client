'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var h = require('react').createElement;
var css = require('./css');
var dict = require('../tachyons.json');

var concat = function concat(a, b) {
  return a.concat(b);
};

var styled = function styled(type) {
  return function (strings) {
    for (var _len = arguments.length, tokens = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      tokens[_key - 1] = arguments[_key];
    }

    var staticKeys = strings.map(function (str) {
      return str.split(/\s+/);
    }).reduce(function (a, b) {
      return [].concat(_toConsumableArray(a), _toConsumableArray(b));
    }, []);

    staticKeys.map(function (key) {
      return dict[key];
    }).filter(function (n) {
      return n !== undefined;
    }).forEach(css);

    var Component = function Component(props) {
      var keys = tokens.map(function (token) {
        return token(props);
      }).filter(function (n) {
        return n !== null && n !== undefined;
      }).map(function (n) {
        return n.split(/\s+/);
      }).reduce(concat, []);
      keys.map(function (key) {
        return dict[key];
      }).filter(function (n) {
        return n !== undefined;
      }).forEach(css);

      var next = parseProps(props);

      return h(type, Object.assign({}, next, {
        className: [next.className].concat(_toConsumableArray(staticKeys), _toConsumableArray(keys)).join(' ').trim()
      }));
    };

    return Component;
  };
};

var parseProps = function parseProps(props) {
  var next = {};
  var classNames = [props.className || ''];
  for (var key in props) {
    if (dict[key]) {
      css(dict[key]);
      classNames.push(key);
      continue;
    }
    next[key] = props[key];
  }

  next.className = classNames.join(' ').trim();

  return next;
};

styled.css = css.css;
styled.reset = css.reset;

module.exports = styled;