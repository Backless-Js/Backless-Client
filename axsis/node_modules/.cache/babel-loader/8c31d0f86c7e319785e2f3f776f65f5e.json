{"ast":null,"code":"const util = require('../util');\n\nconst yaml = require('yamljs');\n\nconst jsesc = require('jsesc');\n\nconst querystring = require('querystring');\n\nfunction getDataString(request) {\n  let bodyFormat = 'json';\n\n  if (typeof request.data === 'number') {\n    request.data = request.data.toString();\n    bodyFormat = 'raw';\n  }\n\n  if (request.data.indexOf(\"'\") > -1) {\n    request.data = jsesc(request.data);\n  }\n\n  const parsedQueryString = querystring.parse(request.data);\n  const keyCount = Object.keys(parsedQueryString).length;\n  const singleKeyOnly = keyCount === 1 && !parsedQueryString[Object.keys(parsedQueryString)[0]];\n  const singularData = request.isDataBinary || singleKeyOnly;\n\n  if (singularData) {\n    return {\n      body: JSON.parse(request.data),\n      body_format: bodyFormat\n    };\n  } else {\n    return {\n      body: request.data,\n      body_format: bodyFormat\n    };\n  }\n}\n\nconst toAnsible = curlCommand => {\n  const request = util.parseCurlCommand(curlCommand);\n  const responses = [];\n  const response = {\n    name: request.urlWithoutQuery\n  };\n\n  if (request.url.indexOf('http') !== 0) {\n    request.url = 'http://' + request.url;\n  }\n\n  response.uri = {\n    url: request.url.toString(),\n    method: request.method.toUpperCase()\n  };\n  response.register = 'result';\n\n  if (request.insecure) {\n    response.uri.validate_certs = 'no';\n  }\n\n  if (typeof request.data === 'string' || typeof request.data === 'number') {\n    const convertedData = getDataString(request);\n    response.uri.body = convertedData.body;\n    response.uri.body_format = convertedData.body_format;\n  }\n\n  if (request.headers) {\n    response.uri.headers = {};\n\n    for (const prop in request.headers) {\n      response.uri.headers[prop] = request.headers[prop];\n    }\n  }\n\n  if (request.cookieString) {\n    response.uri.headers.Cookie = request.cookieString;\n  }\n\n  if (request.auth) {\n    if (request.auth.split(':')[0]) {\n      response.uri.url_username = request.auth.split(':')[0];\n    }\n\n    response.uri.url_password = request.auth.split(':')[1];\n  }\n\n  responses.push(response);\n  const yamlString = yaml.stringify(responses, 100, 2);\n  return yamlString;\n};\n\nmodule.exports = toAnsible;","map":{"version":3,"sources":["/home/marcel/Desktop/CobaProject/GUI backless-js/axsis/node_modules/curlconverter/generators/ansible.js"],"names":["util","require","yaml","jsesc","querystring","getDataString","request","bodyFormat","data","toString","indexOf","parsedQueryString","parse","keyCount","Object","keys","length","singleKeyOnly","singularData","isDataBinary","body","JSON","body_format","toAnsible","curlCommand","parseCurlCommand","responses","response","name","urlWithoutQuery","url","uri","method","toUpperCase","register","insecure","validate_certs","convertedData","headers","prop","cookieString","Cookie","auth","split","url_username","url_password","push","yamlString","stringify","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAApB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAC,aAAD,CAA3B;;AAEA,SAASI,aAAT,CAAwBC,OAAxB,EAAiC;AAC/B,MAAIC,UAAU,GAAG,MAAjB;;AACA,MAAI,OAAOD,OAAO,CAACE,IAAf,KAAwB,QAA5B,EAAsC;AACpCF,IAAAA,OAAO,CAACE,IAAR,GAAeF,OAAO,CAACE,IAAR,CAAaC,QAAb,EAAf;AACAF,IAAAA,UAAU,GAAG,KAAb;AACD;;AACD,MAAID,OAAO,CAACE,IAAR,CAAaE,OAAb,CAAqB,GAArB,IAA4B,CAAC,CAAjC,EAAoC;AAClCJ,IAAAA,OAAO,CAACE,IAAR,GAAeL,KAAK,CAACG,OAAO,CAACE,IAAT,CAApB;AACD;;AACD,QAAMG,iBAAiB,GAAGP,WAAW,CAACQ,KAAZ,CAAkBN,OAAO,CAACE,IAA1B,CAA1B;AACA,QAAMK,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYJ,iBAAZ,EAA+BK,MAAhD;AACA,QAAMC,aAAa,GAAGJ,QAAQ,KAAK,CAAb,IAAkB,CAACF,iBAAiB,CAACG,MAAM,CAACC,IAAP,CAAYJ,iBAAZ,EAA+B,CAA/B,CAAD,CAA1D;AACA,QAAMO,YAAY,GAAGZ,OAAO,CAACa,YAAR,IAAwBF,aAA7C;;AACA,MAAIC,YAAJ,EAAkB;AAChB,WAAO;AAAEE,MAAAA,IAAI,EAAEC,IAAI,CAACT,KAAL,CAAWN,OAAO,CAACE,IAAnB,CAAR;AAAkCc,MAAAA,WAAW,EAAEf;AAA/C,KAAP;AACD,GAFD,MAEO;AACL,WAAO;AAAEa,MAAAA,IAAI,EAAEd,OAAO,CAACE,IAAhB;AAAsBc,MAAAA,WAAW,EAAEf;AAAnC,KAAP;AACD;AACF;;AAED,MAAMgB,SAAS,GAAGC,WAAW,IAAI;AAC/B,QAAMlB,OAAO,GAAGN,IAAI,CAACyB,gBAAL,CAAsBD,WAAtB,CAAhB;AACA,QAAME,SAAS,GAAG,EAAlB;AACA,QAAMC,QAAQ,GAAG;AAAEC,IAAAA,IAAI,EAAEtB,OAAO,CAACuB;AAAhB,GAAjB;;AACA,MAAIvB,OAAO,CAACwB,GAAR,CAAYpB,OAAZ,CAAoB,MAApB,MAAgC,CAApC,EAAuC;AACrCJ,IAAAA,OAAO,CAACwB,GAAR,GAAc,YAAYxB,OAAO,CAACwB,GAAlC;AACD;;AACDH,EAAAA,QAAQ,CAACI,GAAT,GAAe;AACbD,IAAAA,GAAG,EAAExB,OAAO,CAACwB,GAAR,CAAYrB,QAAZ,EADQ;AAEbuB,IAAAA,MAAM,EAAE1B,OAAO,CAAC0B,MAAR,CAAeC,WAAf;AAFK,GAAf;AAIAN,EAAAA,QAAQ,CAACO,QAAT,GAAoB,QAApB;;AACA,MAAI5B,OAAO,CAAC6B,QAAZ,EAAsB;AACpBR,IAAAA,QAAQ,CAACI,GAAT,CAAaK,cAAb,GAA8B,IAA9B;AACD;;AACD,MAAI,OAAO9B,OAAO,CAACE,IAAf,KAAwB,QAAxB,IAAoC,OAAOF,OAAO,CAACE,IAAf,KAAwB,QAAhE,EAA0E;AACxE,UAAM6B,aAAa,GAAGhC,aAAa,CAACC,OAAD,CAAnC;AACAqB,IAAAA,QAAQ,CAACI,GAAT,CAAaX,IAAb,GAAoBiB,aAAa,CAACjB,IAAlC;AACAO,IAAAA,QAAQ,CAACI,GAAT,CAAaT,WAAb,GAA2Be,aAAa,CAACf,WAAzC;AACD;;AACD,MAAIhB,OAAO,CAACgC,OAAZ,EAAqB;AACnBX,IAAAA,QAAQ,CAACI,GAAT,CAAaO,OAAb,GAAuB,EAAvB;;AACA,SAAK,MAAMC,IAAX,IAAmBjC,OAAO,CAACgC,OAA3B,EAAoC;AAClCX,MAAAA,QAAQ,CAACI,GAAT,CAAaO,OAAb,CAAqBC,IAArB,IAA6BjC,OAAO,CAACgC,OAAR,CAAgBC,IAAhB,CAA7B;AACD;AACF;;AACD,MAAIjC,OAAO,CAACkC,YAAZ,EAA0B;AACxBb,IAAAA,QAAQ,CAACI,GAAT,CAAaO,OAAb,CAAqBG,MAArB,GAA8BnC,OAAO,CAACkC,YAAtC;AACD;;AACD,MAAIlC,OAAO,CAACoC,IAAZ,EAAkB;AAChB,QAAIpC,OAAO,CAACoC,IAAR,CAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAJ,EAAgC;AAC9BhB,MAAAA,QAAQ,CAACI,GAAT,CAAaa,YAAb,GAA4BtC,OAAO,CAACoC,IAAR,CAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAA5B;AACD;;AACDhB,IAAAA,QAAQ,CAACI,GAAT,CAAac,YAAb,GAA4BvC,OAAO,CAACoC,IAAR,CAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAA5B;AACD;;AAEDjB,EAAAA,SAAS,CAACoB,IAAV,CAAenB,QAAf;AACA,QAAMoB,UAAU,GAAG7C,IAAI,CAAC8C,SAAL,CAAetB,SAAf,EAA0B,GAA1B,EAA+B,CAA/B,CAAnB;AACA,SAAOqB,UAAP;AACD,CAvCD;;AAyCAE,MAAM,CAACC,OAAP,GAAiB3B,SAAjB","sourcesContent":["const util = require('../util')\nconst yaml = require('yamljs')\nconst jsesc = require('jsesc')\nconst querystring = require('querystring')\n\nfunction getDataString (request) {\n  let bodyFormat = 'json'\n  if (typeof request.data === 'number') {\n    request.data = request.data.toString()\n    bodyFormat = 'raw'\n  }\n  if (request.data.indexOf(\"'\") > -1) {\n    request.data = jsesc(request.data)\n  }\n  const parsedQueryString = querystring.parse(request.data)\n  const keyCount = Object.keys(parsedQueryString).length\n  const singleKeyOnly = keyCount === 1 && !parsedQueryString[Object.keys(parsedQueryString)[0]]\n  const singularData = request.isDataBinary || singleKeyOnly\n  if (singularData) {\n    return { body: JSON.parse(request.data), body_format: bodyFormat }\n  } else {\n    return { body: request.data, body_format: bodyFormat }\n  }\n}\n\nconst toAnsible = curlCommand => {\n  const request = util.parseCurlCommand(curlCommand)\n  const responses = []\n  const response = { name: request.urlWithoutQuery }\n  if (request.url.indexOf('http') !== 0) {\n    request.url = 'http://' + request.url\n  }\n  response.uri = {\n    url: request.url.toString(),\n    method: request.method.toUpperCase()\n  }\n  response.register = 'result'\n  if (request.insecure) {\n    response.uri.validate_certs = 'no'\n  }\n  if (typeof request.data === 'string' || typeof request.data === 'number') {\n    const convertedData = getDataString(request)\n    response.uri.body = convertedData.body\n    response.uri.body_format = convertedData.body_format\n  }\n  if (request.headers) {\n    response.uri.headers = {}\n    for (const prop in request.headers) {\n      response.uri.headers[prop] = request.headers[prop]\n    }\n  }\n  if (request.cookieString) {\n    response.uri.headers.Cookie = request.cookieString\n  }\n  if (request.auth) {\n    if (request.auth.split(':')[0]) {\n      response.uri.url_username = request.auth.split(':')[0]\n    }\n    response.uri.url_password = request.auth.split(':')[1]\n  }\n\n  responses.push(response)\n  const yamlString = yaml.stringify(responses, 100, 2)\n  return yamlString\n}\n\nmodule.exports = toAnsible\n"]},"metadata":{},"sourceType":"script"}