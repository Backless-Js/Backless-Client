{"ast":null,"code":"'use strict';\n\nconst object = {};\nconst hasOwnProperty = object.hasOwnProperty;\n\nconst forOwn = (object, callback) => {\n  for (const key in object) {\n    if (hasOwnProperty.call(object, key)) {\n      callback(key, object[key]);\n    }\n  }\n};\n\nconst extend = (destination, source) => {\n  if (!source) {\n    return destination;\n  }\n\n  forOwn(source, (key, value) => {\n    destination[key] = value;\n  });\n  return destination;\n};\n\nconst forEach = (array, callback) => {\n  const length = array.length;\n  let index = -1;\n\n  while (++index < length) {\n    callback(array[index]);\n  }\n};\n\nconst toString = object.toString;\nconst isArray = Array.isArray;\nconst isBuffer = Buffer.isBuffer;\n\nconst isObject = value => {\n  // This is a very simple check, but it’s good enough for what we need.\n  return toString.call(value) == '[object Object]';\n};\n\nconst isString = value => {\n  return typeof value == 'string' || toString.call(value) == '[object String]';\n};\n\nconst isNumber = value => {\n  return typeof value == 'number' || toString.call(value) == '[object Number]';\n};\n\nconst isFunction = value => {\n  return typeof value == 'function';\n};\n\nconst isMap = value => {\n  return toString.call(value) == '[object Map]';\n};\n\nconst isSet = value => {\n  return toString.call(value) == '[object Set]';\n};\n/*--------------------------------------------------------------------------*/\n// https://mathiasbynens.be/notes/javascript-escapes#single\n\n\nconst singleEscapes = {\n  '\"': '\\\\\"',\n  '\\'': '\\\\\\'',\n  '\\\\': '\\\\\\\\',\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t' // `\\v` is omitted intentionally, because in IE < 9, '\\v' == 'v'.\n  // '\\v': '\\\\x0B'\n\n};\nconst regexSingleEscape = /[\"'\\\\\\b\\f\\n\\r\\t]/;\nconst regexDigit = /[0-9]/;\nconst regexWhitelist = /[ !#-&\\(-\\[\\]-_a-~]/;\n\nconst jsesc = (argument, options) => {\n  const increaseIndentation = () => {\n    oldIndent = indent;\n    ++options.indentLevel;\n    indent = options.indent.repeat(options.indentLevel);\n  }; // Handle options\n\n\n  const defaults = {\n    'escapeEverything': false,\n    'minimal': false,\n    'isScriptContext': false,\n    'quotes': 'single',\n    'wrap': false,\n    'es6': false,\n    'json': false,\n    'compact': true,\n    'lowercaseHex': false,\n    'numbers': 'decimal',\n    'indent': '\\t',\n    'indentLevel': 0,\n    '__inline1__': false,\n    '__inline2__': false\n  };\n  const json = options && options.json;\n\n  if (json) {\n    defaults.quotes = 'double';\n    defaults.wrap = true;\n  }\n\n  options = extend(defaults, options);\n\n  if (options.quotes != 'single' && options.quotes != 'double' && options.quotes != 'backtick') {\n    options.quotes = 'single';\n  }\n\n  const quote = options.quotes == 'double' ? '\"' : options.quotes == 'backtick' ? '`' : '\\'';\n  const compact = options.compact;\n  const lowercaseHex = options.lowercaseHex;\n  let indent = options.indent.repeat(options.indentLevel);\n  let oldIndent = '';\n  const inline1 = options.__inline1__;\n  const inline2 = options.__inline2__;\n  const newLine = compact ? '' : '\\n';\n  let result;\n  let isEmpty = true;\n  const useBinNumbers = options.numbers == 'binary';\n  const useOctNumbers = options.numbers == 'octal';\n  const useDecNumbers = options.numbers == 'decimal';\n  const useHexNumbers = options.numbers == 'hexadecimal';\n\n  if (json && argument && isFunction(argument.toJSON)) {\n    argument = argument.toJSON();\n  }\n\n  if (!isString(argument)) {\n    if (isMap(argument)) {\n      if (argument.size == 0) {\n        return 'new Map()';\n      }\n\n      if (!compact) {\n        options.__inline1__ = true;\n        options.__inline2__ = false;\n      }\n\n      return 'new Map(' + jsesc(Array.from(argument), options) + ')';\n    }\n\n    if (isSet(argument)) {\n      if (argument.size == 0) {\n        return 'new Set()';\n      }\n\n      return 'new Set(' + jsesc(Array.from(argument), options) + ')';\n    }\n\n    if (isBuffer(argument)) {\n      if (argument.length == 0) {\n        return 'Buffer.from([])';\n      }\n\n      return 'Buffer.from(' + jsesc(Array.from(argument), options) + ')';\n    }\n\n    if (isArray(argument)) {\n      result = [];\n      options.wrap = true;\n\n      if (inline1) {\n        options.__inline1__ = false;\n        options.__inline2__ = true;\n      }\n\n      if (!inline2) {\n        increaseIndentation();\n      }\n\n      forEach(argument, value => {\n        isEmpty = false;\n\n        if (inline2) {\n          options.__inline2__ = false;\n        }\n\n        result.push((compact || inline2 ? '' : indent) + jsesc(value, options));\n      });\n\n      if (isEmpty) {\n        return '[]';\n      }\n\n      if (inline2) {\n        return '[' + result.join(', ') + ']';\n      }\n\n      return '[' + newLine + result.join(',' + newLine) + newLine + (compact ? '' : oldIndent) + ']';\n    } else if (isNumber(argument)) {\n      if (json) {\n        // Some number values (e.g. `Infinity`) cannot be represented in JSON.\n        return JSON.stringify(argument);\n      }\n\n      if (useDecNumbers) {\n        return String(argument);\n      }\n\n      if (useHexNumbers) {\n        let hexadecimal = argument.toString(16);\n\n        if (!lowercaseHex) {\n          hexadecimal = hexadecimal.toUpperCase();\n        }\n\n        return '0x' + hexadecimal;\n      }\n\n      if (useBinNumbers) {\n        return '0b' + argument.toString(2);\n      }\n\n      if (useOctNumbers) {\n        return '0o' + argument.toString(8);\n      }\n    } else if (!isObject(argument)) {\n      if (json) {\n        // For some values (e.g. `undefined`, `function` objects),\n        // `JSON.stringify(value)` returns `undefined` (which isn’t valid\n        // JSON) instead of `'null'`.\n        return JSON.stringify(argument) || 'null';\n      }\n\n      return String(argument);\n    } else {\n      // it’s an object\n      result = [];\n      options.wrap = true;\n      increaseIndentation();\n      forOwn(argument, (key, value) => {\n        isEmpty = false;\n        result.push((compact ? '' : indent) + jsesc(key, options) + ':' + (compact ? '' : ' ') + jsesc(value, options));\n      });\n\n      if (isEmpty) {\n        return '{}';\n      }\n\n      return '{' + newLine + result.join(',' + newLine) + newLine + (compact ? '' : oldIndent) + '}';\n    }\n  }\n\n  const string = argument; // Loop over each code unit in the string and escape it\n\n  let index = -1;\n  const length = string.length;\n  result = '';\n\n  while (++index < length) {\n    const character = string.charAt(index);\n\n    if (options.es6) {\n      const first = string.charCodeAt(index);\n\n      if ( // check if it’s the start of a surrogate pair\n      first >= 0xD800 && first <= 0xDBFF && // high surrogate\n      length > index + 1 // there is a next code unit\n      ) {\n          const second = string.charCodeAt(index + 1);\n\n          if (second >= 0xDC00 && second <= 0xDFFF) {\n            // low surrogate\n            // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            const codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n            let hexadecimal = codePoint.toString(16);\n\n            if (!lowercaseHex) {\n              hexadecimal = hexadecimal.toUpperCase();\n            }\n\n            result += '\\\\u{' + hexadecimal + '}';\n            ++index;\n            continue;\n          }\n        }\n    }\n\n    if (!options.escapeEverything) {\n      if (regexWhitelist.test(character)) {\n        // It’s a printable ASCII character that is not `\"`, `'` or `\\`,\n        // so don’t escape it.\n        result += character;\n        continue;\n      }\n\n      if (character == '\"') {\n        result += quote == character ? '\\\\\"' : character;\n        continue;\n      }\n\n      if (character == '`') {\n        result += quote == character ? '\\\\`' : character;\n        continue;\n      }\n\n      if (character == '\\'') {\n        result += quote == character ? '\\\\\\'' : character;\n        continue;\n      }\n    }\n\n    if (character == '\\0' && !json && !regexDigit.test(string.charAt(index + 1))) {\n      result += '\\\\0';\n      continue;\n    }\n\n    if (regexSingleEscape.test(character)) {\n      // no need for a `hasOwnProperty` check here\n      result += singleEscapes[character];\n      continue;\n    }\n\n    const charCode = character.charCodeAt(0);\n\n    if (options.minimal && charCode != 0x2028 && charCode != 0x2029) {\n      result += character;\n      continue;\n    }\n\n    let hexadecimal = charCode.toString(16);\n\n    if (!lowercaseHex) {\n      hexadecimal = hexadecimal.toUpperCase();\n    }\n\n    const longhand = hexadecimal.length > 2 || json;\n    const escaped = '\\\\' + (longhand ? 'u' : 'x') + ('0000' + hexadecimal).slice(longhand ? -4 : -2);\n    result += escaped;\n    continue;\n  }\n\n  if (options.wrap) {\n    result = quote + result + quote;\n  }\n\n  if (quote == '`') {\n    result = result.replace(/\\$\\{/g, '\\\\\\$\\{');\n  }\n\n  if (options.isScriptContext) {\n    // https://mathiasbynens.be/notes/etago\n    return result.replace(/<\\/(script|style)/gi, '<\\\\/$1').replace(/<!--/g, json ? '\\\\u003C!--' : '\\\\x3C!--');\n  }\n\n  return result;\n};\n\njsesc.version = '2.5.2';\nmodule.exports = jsesc;","map":{"version":3,"sources":["/home/marcel/Desktop/CobaProject/GUI backless-js/axsis/node_modules/jsesc/jsesc.js"],"names":["object","hasOwnProperty","forOwn","callback","key","call","extend","destination","source","value","forEach","array","length","index","toString","isArray","Array","isBuffer","Buffer","isObject","isString","isNumber","isFunction","isMap","isSet","singleEscapes","regexSingleEscape","regexDigit","regexWhitelist","jsesc","argument","options","increaseIndentation","oldIndent","indent","indentLevel","repeat","defaults","json","quotes","wrap","quote","compact","lowercaseHex","inline1","__inline1__","inline2","__inline2__","newLine","result","isEmpty","useBinNumbers","numbers","useOctNumbers","useDecNumbers","useHexNumbers","toJSON","size","from","push","join","JSON","stringify","String","hexadecimal","toUpperCase","string","character","charAt","es6","first","charCodeAt","second","codePoint","escapeEverything","test","charCode","minimal","longhand","escaped","slice","replace","isScriptContext","version","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst object = {};\nconst hasOwnProperty = object.hasOwnProperty;\nconst forOwn = (object, callback) => {\n\tfor (const key in object) {\n\t\tif (hasOwnProperty.call(object, key)) {\n\t\t\tcallback(key, object[key]);\n\t\t}\n\t}\n};\n\nconst extend = (destination, source) => {\n\tif (!source) {\n\t\treturn destination;\n\t}\n\tforOwn(source, (key, value) => {\n\t\tdestination[key] = value;\n\t});\n\treturn destination;\n};\n\nconst forEach = (array, callback) => {\n\tconst length = array.length;\n\tlet index = -1;\n\twhile (++index < length) {\n\t\tcallback(array[index]);\n\t}\n};\n\nconst toString = object.toString;\nconst isArray = Array.isArray;\nconst isBuffer = Buffer.isBuffer;\nconst isObject = (value) => {\n\t// This is a very simple check, but it’s good enough for what we need.\n\treturn toString.call(value) == '[object Object]';\n};\nconst isString = (value) => {\n\treturn typeof value == 'string' ||\n\t\ttoString.call(value) == '[object String]';\n};\nconst isNumber = (value) => {\n\treturn typeof value == 'number' ||\n\t\ttoString.call(value) == '[object Number]';\n};\nconst isFunction = (value) => {\n\treturn typeof value == 'function';\n};\nconst isMap = (value) => {\n\treturn toString.call(value) == '[object Map]';\n};\nconst isSet = (value) => {\n\treturn toString.call(value) == '[object Set]';\n};\n\n/*--------------------------------------------------------------------------*/\n\n// https://mathiasbynens.be/notes/javascript-escapes#single\nconst singleEscapes = {\n\t'\"': '\\\\\"',\n\t'\\'': '\\\\\\'',\n\t'\\\\': '\\\\\\\\',\n\t'\\b': '\\\\b',\n\t'\\f': '\\\\f',\n\t'\\n': '\\\\n',\n\t'\\r': '\\\\r',\n\t'\\t': '\\\\t'\n\t// `\\v` is omitted intentionally, because in IE < 9, '\\v' == 'v'.\n\t// '\\v': '\\\\x0B'\n};\nconst regexSingleEscape = /[\"'\\\\\\b\\f\\n\\r\\t]/;\n\nconst regexDigit = /[0-9]/;\nconst regexWhitelist = /[ !#-&\\(-\\[\\]-_a-~]/;\n\nconst jsesc = (argument, options) => {\n\tconst increaseIndentation = () => {\n\t\toldIndent = indent;\n\t\t++options.indentLevel;\n\t\tindent = options.indent.repeat(options.indentLevel)\n\t};\n\t// Handle options\n\tconst defaults = {\n\t\t'escapeEverything': false,\n\t\t'minimal': false,\n\t\t'isScriptContext': false,\n\t\t'quotes': 'single',\n\t\t'wrap': false,\n\t\t'es6': false,\n\t\t'json': false,\n\t\t'compact': true,\n\t\t'lowercaseHex': false,\n\t\t'numbers': 'decimal',\n\t\t'indent': '\\t',\n\t\t'indentLevel': 0,\n\t\t'__inline1__': false,\n\t\t'__inline2__': false\n\t};\n\tconst json = options && options.json;\n\tif (json) {\n\t\tdefaults.quotes = 'double';\n\t\tdefaults.wrap = true;\n\t}\n\toptions = extend(defaults, options);\n\tif (\n\t\toptions.quotes != 'single' &&\n\t\toptions.quotes != 'double' &&\n\t\toptions.quotes != 'backtick'\n\t) {\n\t\toptions.quotes = 'single';\n\t}\n\tconst quote = options.quotes == 'double' ?\n\t\t'\"' :\n\t\t(options.quotes == 'backtick' ?\n\t\t\t'`' :\n\t\t\t'\\''\n\t\t);\n\tconst compact = options.compact;\n\tconst lowercaseHex = options.lowercaseHex;\n\tlet indent = options.indent.repeat(options.indentLevel);\n\tlet oldIndent = '';\n\tconst inline1 = options.__inline1__;\n\tconst inline2 = options.__inline2__;\n\tconst newLine = compact ? '' : '\\n';\n\tlet result;\n\tlet isEmpty = true;\n\tconst useBinNumbers = options.numbers == 'binary';\n\tconst useOctNumbers = options.numbers == 'octal';\n\tconst useDecNumbers = options.numbers == 'decimal';\n\tconst useHexNumbers = options.numbers == 'hexadecimal';\n\n\tif (json && argument && isFunction(argument.toJSON)) {\n\t\targument = argument.toJSON();\n\t}\n\n\tif (!isString(argument)) {\n\t\tif (isMap(argument)) {\n\t\t\tif (argument.size == 0) {\n\t\t\t\treturn 'new Map()';\n\t\t\t}\n\t\t\tif (!compact) {\n\t\t\t\toptions.__inline1__ = true;\n\t\t\t\toptions.__inline2__ = false;\n\t\t\t}\n\t\t\treturn 'new Map(' + jsesc(Array.from(argument), options) + ')';\n\t\t}\n\t\tif (isSet(argument)) {\n\t\t\tif (argument.size == 0) {\n\t\t\t\treturn 'new Set()';\n\t\t\t}\n\t\t\treturn 'new Set(' + jsesc(Array.from(argument), options) + ')';\n\t\t}\n\t\tif (isBuffer(argument)) {\n\t\t\tif (argument.length == 0) {\n\t\t\t\treturn 'Buffer.from([])';\n\t\t\t}\n\t\t\treturn 'Buffer.from(' + jsesc(Array.from(argument), options) + ')';\n\t\t}\n\t\tif (isArray(argument)) {\n\t\t\tresult = [];\n\t\t\toptions.wrap = true;\n\t\t\tif (inline1) {\n\t\t\t\toptions.__inline1__ = false;\n\t\t\t\toptions.__inline2__ = true;\n\t\t\t}\n\t\t\tif (!inline2) {\n\t\t\t\tincreaseIndentation();\n\t\t\t}\n\t\t\tforEach(argument, (value) => {\n\t\t\t\tisEmpty = false;\n\t\t\t\tif (inline2) {\n\t\t\t\t\toptions.__inline2__ = false;\n\t\t\t\t}\n\t\t\t\tresult.push(\n\t\t\t\t\t(compact || inline2 ? '' : indent) +\n\t\t\t\t\tjsesc(value, options)\n\t\t\t\t);\n\t\t\t});\n\t\t\tif (isEmpty) {\n\t\t\t\treturn '[]';\n\t\t\t}\n\t\t\tif (inline2) {\n\t\t\t\treturn '[' + result.join(', ') + ']';\n\t\t\t}\n\t\t\treturn '[' + newLine + result.join(',' + newLine) + newLine +\n\t\t\t\t(compact ? '' : oldIndent) + ']';\n\t\t} else if (isNumber(argument)) {\n\t\t\tif (json) {\n\t\t\t\t// Some number values (e.g. `Infinity`) cannot be represented in JSON.\n\t\t\t\treturn JSON.stringify(argument);\n\t\t\t}\n\t\t\tif (useDecNumbers) {\n\t\t\t\treturn String(argument);\n\t\t\t}\n\t\t\tif (useHexNumbers) {\n\t\t\t\tlet hexadecimal = argument.toString(16);\n\t\t\t\tif (!lowercaseHex) {\n\t\t\t\t\thexadecimal = hexadecimal.toUpperCase();\n\t\t\t\t}\n\t\t\t\treturn '0x' + hexadecimal;\n\t\t\t}\n\t\t\tif (useBinNumbers) {\n\t\t\t\treturn '0b' + argument.toString(2);\n\t\t\t}\n\t\t\tif (useOctNumbers) {\n\t\t\t\treturn '0o' + argument.toString(8);\n\t\t\t}\n\t\t} else if (!isObject(argument)) {\n\t\t\tif (json) {\n\t\t\t\t// For some values (e.g. `undefined`, `function` objects),\n\t\t\t\t// `JSON.stringify(value)` returns `undefined` (which isn’t valid\n\t\t\t\t// JSON) instead of `'null'`.\n\t\t\t\treturn JSON.stringify(argument) || 'null';\n\t\t\t}\n\t\t\treturn String(argument);\n\t\t} else { // it’s an object\n\t\t\tresult = [];\n\t\t\toptions.wrap = true;\n\t\t\tincreaseIndentation();\n\t\t\tforOwn(argument, (key, value) => {\n\t\t\t\tisEmpty = false;\n\t\t\t\tresult.push(\n\t\t\t\t\t(compact ? '' : indent) +\n\t\t\t\t\tjsesc(key, options) + ':' +\n\t\t\t\t\t(compact ? '' : ' ') +\n\t\t\t\t\tjsesc(value, options)\n\t\t\t\t);\n\t\t\t});\n\t\t\tif (isEmpty) {\n\t\t\t\treturn '{}';\n\t\t\t}\n\t\t\treturn '{' + newLine + result.join(',' + newLine) + newLine +\n\t\t\t\t(compact ? '' : oldIndent) + '}';\n\t\t}\n\t}\n\n\tconst string = argument;\n\t// Loop over each code unit in the string and escape it\n\tlet index = -1;\n\tconst length = string.length;\n\tresult = '';\n\twhile (++index < length) {\n\t\tconst character = string.charAt(index);\n\t\tif (options.es6) {\n\t\t\tconst first = string.charCodeAt(index);\n\t\t\tif ( // check if it’s the start of a surrogate pair\n\t\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\n\t\t\t\tlength > index + 1 // there is a next code unit\n\t\t\t) {\n\t\t\t\tconst second = string.charCodeAt(index + 1);\n\t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\tconst codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t\t\t\t\tlet hexadecimal = codePoint.toString(16);\n\t\t\t\t\tif (!lowercaseHex) {\n\t\t\t\t\t\thexadecimal = hexadecimal.toUpperCase();\n\t\t\t\t\t}\n\t\t\t\t\tresult += '\\\\u{' + hexadecimal + '}';\n\t\t\t\t\t++index;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!options.escapeEverything) {\n\t\t\tif (regexWhitelist.test(character)) {\n\t\t\t\t// It’s a printable ASCII character that is not `\"`, `'` or `\\`,\n\t\t\t\t// so don’t escape it.\n\t\t\t\tresult += character;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (character == '\"') {\n\t\t\t\tresult += quote == character ? '\\\\\"' : character;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (character == '`') {\n\t\t\t\tresult += quote == character ? '\\\\`' : character;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (character == '\\'') {\n\t\t\t\tresult += quote == character ? '\\\\\\'' : character;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\tcharacter == '\\0' &&\n\t\t\t!json &&\n\t\t\t!regexDigit.test(string.charAt(index + 1))\n\t\t) {\n\t\t\tresult += '\\\\0';\n\t\t\tcontinue;\n\t\t}\n\t\tif (regexSingleEscape.test(character)) {\n\t\t\t// no need for a `hasOwnProperty` check here\n\t\t\tresult += singleEscapes[character];\n\t\t\tcontinue;\n\t\t}\n\t\tconst charCode = character.charCodeAt(0);\n\t\tif (options.minimal && charCode != 0x2028 && charCode != 0x2029) {\n\t\t\tresult += character;\n\t\t\tcontinue;\n\t\t}\n\t\tlet hexadecimal = charCode.toString(16);\n\t\tif (!lowercaseHex) {\n\t\t\thexadecimal = hexadecimal.toUpperCase();\n\t\t}\n\t\tconst longhand = hexadecimal.length > 2 || json;\n\t\tconst escaped = '\\\\' + (longhand ? 'u' : 'x') +\n\t\t\t('0000' + hexadecimal).slice(longhand ? -4 : -2);\n\t\tresult += escaped;\n\t\tcontinue;\n\t}\n\tif (options.wrap) {\n\t\tresult = quote + result + quote;\n\t}\n\tif (quote == '`') {\n\t\tresult = result.replace(/\\$\\{/g, '\\\\\\$\\{');\n\t}\n\tif (options.isScriptContext) {\n\t\t// https://mathiasbynens.be/notes/etago\n\t\treturn result\n\t\t\t.replace(/<\\/(script|style)/gi, '<\\\\/$1')\n\t\t\t.replace(/<!--/g, json ? '\\\\u003C!--' : '\\\\x3C!--');\n\t}\n\treturn result;\n};\n\njsesc.version = '2.5.2';\n\nmodule.exports = jsesc;\n"]},"metadata":{},"sourceType":"script"}