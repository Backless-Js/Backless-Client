{"ast":null,"code":"// Author: ssi-anik (sirajul.islam.anik@gmail.com)\nconst util = require('../util');\n\nconst querystring = require('querystring');\n\nconst jsesc = require('jsesc');\n\nrequire('string.prototype.startswith');\n\nfunction repr(value, isKey) {\n  // In context of url parameters, don't accept nulls and such.\n\n  /*\n    if ( !value ) {\n   return \"\"\n   } else {\n   return \"'\" + jsesc(value, { quotes: 'single' }) + \"'\"\n   } */\n  return isKey ? \"'\" + jsesc(value, {\n    quotes: 'single'\n  }) + \"'\" : value;\n}\n\nfunction getQueries(request) {\n  const queries = {};\n\n  for (const paramName in request.query) {\n    const rawValue = request.query[paramName];\n    let paramValue;\n\n    if (Array.isArray(rawValue)) {\n      paramValue = rawValue.map(repr);\n    } else {\n      paramValue = repr(rawValue);\n    }\n\n    queries[repr(paramName)] = paramValue;\n  }\n\n  return queries;\n}\n\nfunction getDataString(request) {\n  if (typeof request.data === 'number') {\n    request.data = request.data.toString();\n  }\n  /*\n    if ( request.data.startsWith('@') ) {\n   var filePath = request.data.slice(1);\n   return filePath;\n   }\n   */\n\n\n  const parsedQueryString = querystring.parse(request.data);\n  const keyCount = Object.keys(parsedQueryString).length;\n  const singleKeyOnly = keyCount === 1 && !parsedQueryString[Object.keys(parsedQueryString)[0]];\n  const singularData = request.isDataBinary || singleKeyOnly;\n\n  if (singularData) {\n    const data = {};\n    data[repr(request.data)] = '';\n    return {\n      data: data\n    };\n  } else {\n    return getMultipleDataString(request, parsedQueryString);\n  }\n}\n\nfunction getMultipleDataString(request, parsedQueryString) {\n  const data = {};\n\n  for (const key in parsedQueryString) {\n    const value = parsedQueryString[key];\n\n    if (Array.isArray(value)) {\n      data[repr(key)] = value;\n    } else {\n      data[repr(key)] = repr(value);\n    }\n  }\n\n  return {\n    data: data\n  };\n}\n\nfunction getFilesString(request) {\n  const data = {};\n  data.files = {};\n  data.data = {};\n\n  for (const multipartKey in request.multipartUploads) {\n    const multipartValue = request.multipartUploads[multipartKey];\n\n    if (multipartValue.startsWith('@')) {\n      const fileName = multipartValue.slice(1);\n      data.files[repr(multipartKey)] = repr(fileName);\n    } else {\n      data.data[repr(multipartKey)] = repr(multipartValue);\n    }\n  }\n\n  if (Object.keys(data.files).length === 0) {\n    delete data.files;\n  }\n\n  if (Object.keys(data.data).length === 0) {\n    delete data.data;\n  }\n\n  return data;\n}\n\nconst toJsonString = curlCommand => {\n  const request = util.parseCurlCommand(curlCommand);\n  const requestJson = {}; // curl automatically prepends 'http' if the scheme is missing, but python fails and returns an error\n  // we tack it on here to mimic curl\n\n  if (request.url.indexOf('http') !== 0) {\n    request.url = 'http://' + request.url;\n  }\n\n  if (request.urlWithoutQuery.indexOf('http') !== 0) {\n    request.urlWithoutQuery = 'http://' + request.urlWithoutQuery;\n  }\n\n  requestJson.url = request.urlWithoutQuery.replace(/\\/$/, '');\n  requestJson.raw_url = request.url;\n  requestJson.method = request.method;\n\n  if (request.cookies) {\n    const cookies = {};\n\n    for (const cookieName in request.cookies) {\n      cookies[repr(cookieName)] = repr(request.cookies[cookieName]);\n    }\n\n    requestJson.cookies = cookies;\n  }\n\n  if (request.headers) {\n    const headers = {};\n\n    for (const headerName in request.headers) {\n      headers[repr(headerName)] = repr(request.headers[headerName]);\n    }\n\n    requestJson.headers = headers;\n  }\n\n  if (request.query) {\n    requestJson.queries = getQueries(request);\n  }\n\n  if (typeof request.data === 'string' || typeof request.data === 'number') {\n    Object.assign(requestJson, getDataString(request));\n  } else if (request.multipartUploads) {\n    Object.assign(requestJson, getFilesString(request));\n  }\n\n  if (request.insecure) {\n    requestJson.insecure = false;\n  }\n\n  if (request.auth) {\n    const splitAuth = request.auth.split(':');\n    const user = splitAuth[0] || '';\n    const password = splitAuth[1] || '';\n    requestJson.auth = {\n      user: repr(user),\n      password: repr(password)\n    };\n  }\n\n  return JSON.stringify(Object.keys(requestJson).length ? requestJson : '{}', null, 4) + '\\n';\n};\n\nmodule.exports = toJsonString;","map":{"version":3,"sources":["/home/marcel/Desktop/CobaProject/GUI backless-js/axsis/node_modules/curlconverter/generators/json.js"],"names":["util","require","querystring","jsesc","repr","value","isKey","quotes","getQueries","request","queries","paramName","query","rawValue","paramValue","Array","isArray","map","getDataString","data","toString","parsedQueryString","parse","keyCount","Object","keys","length","singleKeyOnly","singularData","isDataBinary","getMultipleDataString","key","getFilesString","files","multipartKey","multipartUploads","multipartValue","startsWith","fileName","slice","toJsonString","curlCommand","parseCurlCommand","requestJson","url","indexOf","urlWithoutQuery","replace","raw_url","method","cookies","cookieName","headers","headerName","assign","insecure","auth","splitAuth","split","user","password","JSON","stringify","module","exports"],"mappings":"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","sourcesContent":["// Author: ssi-anik (sirajul.islam.anik@gmail.com)\n\nconst util = require('../util')\nconst querystring = require('querystring')\nconst jsesc = require('jsesc')\n\nrequire('string.prototype.startswith')\n\nfunction repr (value, isKey) {\n  // In context of url parameters, don't accept nulls and such.\n  /*\n    if ( !value ) {\n   return \"\"\n   } else {\n   return \"'\" + jsesc(value, { quotes: 'single' }) + \"'\"\n   } */\n  return isKey ? \"'\" + jsesc(value, { quotes: 'single' }) + \"'\" : value\n}\n\nfunction getQueries (request) {\n  const queries = {}\n  for (const paramName in request.query) {\n    const rawValue = request.query[paramName]\n    let paramValue\n    if (Array.isArray(rawValue)) {\n      paramValue = rawValue.map(repr)\n    } else {\n      paramValue = repr(rawValue)\n    }\n    queries[repr(paramName)] = paramValue\n  }\n\n  return queries\n}\n\nfunction getDataString (request) {\n  if (typeof request.data === 'number') {\n    request.data = request.data.toString()\n  }\n\n  /*\n    if ( request.data.startsWith('@') ) {\n   var filePath = request.data.slice(1);\n   return filePath;\n   }\n   */\n\n  const parsedQueryString = querystring.parse(request.data)\n  const keyCount = Object.keys(parsedQueryString).length\n  const singleKeyOnly = keyCount === 1 && !parsedQueryString[Object.keys(parsedQueryString)[0]]\n  const singularData = request.isDataBinary || singleKeyOnly\n  if (singularData) {\n    const data = {}\n    data[repr(request.data)] = ''\n    return { data: data }\n  } else {\n    return getMultipleDataString(request, parsedQueryString)\n  }\n}\n\nfunction getMultipleDataString (request, parsedQueryString) {\n  const data = {}\n\n  for (const key in parsedQueryString) {\n    const value = parsedQueryString[key]\n    if (Array.isArray(value)) {\n      data[repr(key)] = value\n    } else {\n      data[repr(key)] = repr(value)\n    }\n  }\n\n  return { data: data }\n}\n\nfunction getFilesString (request) {\n  const data = {}\n\n  data.files = {}\n  data.data = {}\n\n  for (const multipartKey in request.multipartUploads) {\n    const multipartValue = request.multipartUploads[multipartKey]\n    if (multipartValue.startsWith('@')) {\n      const fileName = multipartValue.slice(1)\n      data.files[repr(multipartKey)] = repr(fileName)\n    } else {\n      data.data[repr(multipartKey)] = repr(multipartValue)\n    }\n  }\n\n  if (Object.keys(data.files).length === 0) {\n    delete data.files\n  }\n\n  if (Object.keys(data.data).length === 0) {\n    delete data.data\n  }\n\n  return data\n}\n\nconst toJsonString = curlCommand => {\n  const request = util.parseCurlCommand(curlCommand)\n\n  const requestJson = {}\n\n  // curl automatically prepends 'http' if the scheme is missing, but python fails and returns an error\n  // we tack it on here to mimic curl\n  if (request.url.indexOf('http') !== 0) {\n    request.url = 'http://' + request.url\n  }\n\n  if (request.urlWithoutQuery.indexOf('http') !== 0) {\n    request.urlWithoutQuery = 'http://' + request.urlWithoutQuery\n  }\n\n  requestJson.url = request.urlWithoutQuery.replace(/\\/$/, '')\n  requestJson.raw_url = request.url\n  requestJson.method = request.method\n\n  if (request.cookies) {\n    const cookies = {}\n    for (const cookieName in request.cookies) {\n      cookies[repr(cookieName)] = repr(request.cookies[cookieName])\n    }\n\n    requestJson.cookies = cookies\n  }\n\n  if (request.headers) {\n    const headers = {}\n    for (const headerName in request.headers) {\n      headers[repr(headerName)] = repr(request.headers[headerName])\n    }\n\n    requestJson.headers = headers\n  }\n\n  if (request.query) {\n    requestJson.queries = getQueries(request)\n  }\n\n  if (typeof request.data === 'string' || typeof request.data === 'number') {\n    Object.assign(requestJson, getDataString(request))\n  } else if (request.multipartUploads) {\n    Object.assign(requestJson, getFilesString(request))\n  }\n\n  if (request.insecure) {\n    requestJson.insecure = false\n  }\n\n  if (request.auth) {\n    const splitAuth = request.auth.split(':')\n    const user = splitAuth[0] || ''\n    const password = splitAuth[1] || ''\n\n    requestJson.auth = {\n      user: repr(user),\n      password: repr(password)\n    }\n  }\n\n  return JSON.stringify(Object.keys(requestJson).length ? requestJson : '{}', null, 4) + '\\n'\n}\n\nmodule.exports = toJsonString\n"]},"metadata":{},"sourceType":"script"}