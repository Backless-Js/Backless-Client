{"ast":null,"code":"// Generated by CoffeeScript 1.12.4\nvar Dumper, Parser, Utils, Yaml;\nParser = require('./Parser');\nDumper = require('./Dumper');\nUtils = require('./Utils');\n\nYaml = function () {\n  function Yaml() {}\n\n  Yaml.parse = function (input, exceptionOnInvalidType, objectDecoder) {\n    if (exceptionOnInvalidType == null) {\n      exceptionOnInvalidType = false;\n    }\n\n    if (objectDecoder == null) {\n      objectDecoder = null;\n    }\n\n    return new Parser().parse(input, exceptionOnInvalidType, objectDecoder);\n  };\n\n  Yaml.parseFile = function (path, callback, exceptionOnInvalidType, objectDecoder) {\n    var input;\n\n    if (callback == null) {\n      callback = null;\n    }\n\n    if (exceptionOnInvalidType == null) {\n      exceptionOnInvalidType = false;\n    }\n\n    if (objectDecoder == null) {\n      objectDecoder = null;\n    }\n\n    if (callback != null) {\n      return Utils.getStringFromFile(path, function (_this) {\n        return function (input) {\n          var result;\n          result = null;\n\n          if (input != null) {\n            result = _this.parse(input, exceptionOnInvalidType, objectDecoder);\n          }\n\n          callback(result);\n        };\n      }(this));\n    } else {\n      input = Utils.getStringFromFile(path);\n\n      if (input != null) {\n        return this.parse(input, exceptionOnInvalidType, objectDecoder);\n      }\n\n      return null;\n    }\n  };\n\n  Yaml.dump = function (input, inline, indent, exceptionOnInvalidType, objectEncoder) {\n    var yaml;\n\n    if (inline == null) {\n      inline = 2;\n    }\n\n    if (indent == null) {\n      indent = 4;\n    }\n\n    if (exceptionOnInvalidType == null) {\n      exceptionOnInvalidType = false;\n    }\n\n    if (objectEncoder == null) {\n      objectEncoder = null;\n    }\n\n    yaml = new Dumper();\n    yaml.indentation = indent;\n    return yaml.dump(input, inline, 0, exceptionOnInvalidType, objectEncoder);\n  };\n\n  Yaml.stringify = function (input, inline, indent, exceptionOnInvalidType, objectEncoder) {\n    return this.dump(input, inline, indent, exceptionOnInvalidType, objectEncoder);\n  };\n\n  Yaml.load = function (path, callback, exceptionOnInvalidType, objectDecoder) {\n    return this.parseFile(path, callback, exceptionOnInvalidType, objectDecoder);\n  };\n\n  return Yaml;\n}();\n\nif (typeof window !== \"undefined\" && window !== null) {\n  window.YAML = Yaml;\n}\n\nif (typeof window === \"undefined\" || window === null) {\n  this.YAML = Yaml;\n}\n\nmodule.exports = Yaml;","map":{"version":3,"sources":["/home/marcel/Desktop/CobaProject/GUI backless-js/axsis/node_modules/yamljs/lib/Yaml.js"],"names":["Dumper","Parser","Utils","Yaml","require","parse","input","exceptionOnInvalidType","objectDecoder","parseFile","path","callback","getStringFromFile","_this","result","dump","inline","indent","objectEncoder","yaml","indentation","stringify","load","window","YAML","module","exports"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 1.12.4\nvar Dumper, Parser, Utils, Yaml;\n\nParser = require('./Parser');\n\nDumper = require('./Dumper');\n\nUtils = require('./Utils');\n\nYaml = (function() {\n  function Yaml() {}\n\n  Yaml.parse = function(input, exceptionOnInvalidType, objectDecoder) {\n    if (exceptionOnInvalidType == null) {\n      exceptionOnInvalidType = false;\n    }\n    if (objectDecoder == null) {\n      objectDecoder = null;\n    }\n    return new Parser().parse(input, exceptionOnInvalidType, objectDecoder);\n  };\n\n  Yaml.parseFile = function(path, callback, exceptionOnInvalidType, objectDecoder) {\n    var input;\n    if (callback == null) {\n      callback = null;\n    }\n    if (exceptionOnInvalidType == null) {\n      exceptionOnInvalidType = false;\n    }\n    if (objectDecoder == null) {\n      objectDecoder = null;\n    }\n    if (callback != null) {\n      return Utils.getStringFromFile(path, (function(_this) {\n        return function(input) {\n          var result;\n          result = null;\n          if (input != null) {\n            result = _this.parse(input, exceptionOnInvalidType, objectDecoder);\n          }\n          callback(result);\n        };\n      })(this));\n    } else {\n      input = Utils.getStringFromFile(path);\n      if (input != null) {\n        return this.parse(input, exceptionOnInvalidType, objectDecoder);\n      }\n      return null;\n    }\n  };\n\n  Yaml.dump = function(input, inline, indent, exceptionOnInvalidType, objectEncoder) {\n    var yaml;\n    if (inline == null) {\n      inline = 2;\n    }\n    if (indent == null) {\n      indent = 4;\n    }\n    if (exceptionOnInvalidType == null) {\n      exceptionOnInvalidType = false;\n    }\n    if (objectEncoder == null) {\n      objectEncoder = null;\n    }\n    yaml = new Dumper();\n    yaml.indentation = indent;\n    return yaml.dump(input, inline, 0, exceptionOnInvalidType, objectEncoder);\n  };\n\n  Yaml.stringify = function(input, inline, indent, exceptionOnInvalidType, objectEncoder) {\n    return this.dump(input, inline, indent, exceptionOnInvalidType, objectEncoder);\n  };\n\n  Yaml.load = function(path, callback, exceptionOnInvalidType, objectDecoder) {\n    return this.parseFile(path, callback, exceptionOnInvalidType, objectDecoder);\n  };\n\n  return Yaml;\n\n})();\n\nif (typeof window !== \"undefined\" && window !== null) {\n  window.YAML = Yaml;\n}\n\nif (typeof window === \"undefined\" || window === null) {\n  this.YAML = Yaml;\n}\n\nmodule.exports = Yaml;\n"]},"metadata":{},"sourceType":"script"}