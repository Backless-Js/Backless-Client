{"ast":null,"code":"var stringWidth = require('string-width');\n\nvar stripAnsi = require('strip-ansi');\n\nvar wrap = require('wrap-ansi');\n\nvar align = {\n  right: alignRight,\n  center: alignCenter\n};\nvar top = 0;\nvar right = 1;\nvar bottom = 2;\nvar left = 3;\n\nfunction UI(opts) {\n  this.width = opts.width;\n  this.wrap = opts.wrap;\n  this.rows = [];\n}\n\nUI.prototype.span = function () {\n  var cols = this.div.apply(this, arguments);\n  cols.span = true;\n};\n\nUI.prototype.div = function () {\n  if (arguments.length === 0) this.div('');\n\n  if (this.wrap && this._shouldApplyLayoutDSL.apply(this, arguments)) {\n    return this._applyLayoutDSL(arguments[0]);\n  }\n\n  var cols = [];\n\n  for (var i = 0, arg; (arg = arguments[i]) !== undefined; i++) {\n    if (typeof arg === 'string') cols.push(this._colFromString(arg));else cols.push(arg);\n  }\n\n  this.rows.push(cols);\n  return cols;\n};\n\nUI.prototype._shouldApplyLayoutDSL = function () {\n  return arguments.length === 1 && typeof arguments[0] === 'string' && /[\\t\\n]/.test(arguments[0]);\n};\n\nUI.prototype._applyLayoutDSL = function (str) {\n  var _this = this;\n\n  var rows = str.split('\\n');\n  var leftColumnWidth = 0; // simple heuristic for layout, make sure the\n  // second column lines up along the left-hand.\n  // don't allow the first column to take up more\n  // than 50% of the screen.\n\n  rows.forEach(function (row) {\n    var columns = row.split('\\t');\n\n    if (columns.length > 1 && stringWidth(columns[0]) > leftColumnWidth) {\n      leftColumnWidth = Math.min(Math.floor(_this.width * 0.5), stringWidth(columns[0]));\n    }\n  }); // generate a table:\n  //  replacing ' ' with padding calculations.\n  //  using the algorithmically generated width.\n\n  rows.forEach(function (row) {\n    var columns = row.split('\\t');\n\n    _this.div.apply(_this, columns.map(function (r, i) {\n      return {\n        text: r.trim(),\n        padding: _this._measurePadding(r),\n        width: i === 0 && columns.length > 1 ? leftColumnWidth : undefined\n      };\n    }));\n  });\n  return this.rows[this.rows.length - 1];\n};\n\nUI.prototype._colFromString = function (str) {\n  return {\n    text: str,\n    padding: this._measurePadding(str)\n  };\n};\n\nUI.prototype._measurePadding = function (str) {\n  // measure padding without ansi escape codes\n  var noAnsi = stripAnsi(str);\n  return [0, noAnsi.match(/\\s*$/)[0].length, 0, noAnsi.match(/^\\s*/)[0].length];\n};\n\nUI.prototype.toString = function () {\n  var _this = this;\n\n  var lines = [];\n\n  _this.rows.forEach(function (row, i) {\n    _this.rowToString(row, lines);\n  }); // don't display any lines with the\n  // hidden flag set.\n\n\n  lines = lines.filter(function (line) {\n    return !line.hidden;\n  });\n  return lines.map(function (line) {\n    return line.text;\n  }).join('\\n');\n};\n\nUI.prototype.rowToString = function (row, lines) {\n  var _this = this;\n\n  var padding;\n\n  var rrows = this._rasterize(row);\n\n  var str = '';\n  var ts;\n  var width;\n  var wrapWidth;\n  rrows.forEach(function (rrow, r) {\n    str = '';\n    rrow.forEach(function (col, c) {\n      ts = ''; // temporary string used during alignment/padding.\n\n      width = row[c].width; // the width with padding.\n\n      wrapWidth = _this._negatePadding(row[c]); // the width without padding.\n\n      ts += col;\n\n      for (var i = 0; i < wrapWidth - stringWidth(col); i++) {\n        ts += ' ';\n      } // align the string within its column.\n\n\n      if (row[c].align && row[c].align !== 'left' && _this.wrap) {\n        ts = align[row[c].align](ts, wrapWidth);\n        if (stringWidth(ts) < wrapWidth) ts += new Array(width - stringWidth(ts)).join(' ');\n      } // apply border and padding to string.\n\n\n      padding = row[c].padding || [0, 0, 0, 0];\n      if (padding[left]) str += new Array(padding[left] + 1).join(' ');\n      str += addBorder(row[c], ts, '| ');\n      str += ts;\n      str += addBorder(row[c], ts, ' |');\n      if (padding[right]) str += new Array(padding[right] + 1).join(' '); // if prior row is span, try to render the\n      // current row on the prior line.\n\n      if (r === 0 && lines.length > 0) {\n        str = _this._renderInline(str, lines[lines.length - 1]);\n      }\n    }); // remove trailing whitespace.\n\n    lines.push({\n      text: str.replace(/ +$/, ''),\n      span: row.span\n    });\n  });\n  return lines;\n};\n\nfunction addBorder(col, ts, style) {\n  if (col.border) {\n    if (/[.']-+[.']/.test(ts)) return '';else if (ts.trim().length) return style;else return '  ';\n  }\n\n  return '';\n} // if the full 'source' can render in\n// the target line, do so.\n\n\nUI.prototype._renderInline = function (source, previousLine) {\n  var leadingWhitespace = source.match(/^ */)[0].length;\n  var target = previousLine.text;\n  var targetTextWidth = stringWidth(target.trimRight());\n  if (!previousLine.span) return source; // if we're not applying wrapping logic,\n  // just always append to the span.\n\n  if (!this.wrap) {\n    previousLine.hidden = true;\n    return target + source;\n  }\n\n  if (leadingWhitespace < targetTextWidth) return source;\n  previousLine.hidden = true;\n  return target.trimRight() + new Array(leadingWhitespace - targetTextWidth + 1).join(' ') + source.trimLeft();\n};\n\nUI.prototype._rasterize = function (row) {\n  var _this = this;\n\n  var i;\n  var rrow;\n  var rrows = [];\n\n  var widths = this._columnWidths(row);\n\n  var wrapped; // word wrap all columns, and create\n  // a data-structure that is easy to rasterize.\n\n  row.forEach(function (col, c) {\n    // leave room for left and right padding.\n    col.width = widths[c];\n    if (_this.wrap) wrapped = wrap(col.text, _this._negatePadding(col), {\n      hard: true\n    }).split('\\n');else wrapped = col.text.split('\\n');\n\n    if (col.border) {\n      wrapped.unshift('.' + new Array(_this._negatePadding(col) + 3).join('-') + '.');\n      wrapped.push(\"'\" + new Array(_this._negatePadding(col) + 3).join('-') + \"'\");\n    } // add top and bottom padding.\n\n\n    if (col.padding) {\n      for (i = 0; i < (col.padding[top] || 0); i++) wrapped.unshift('');\n\n      for (i = 0; i < (col.padding[bottom] || 0); i++) wrapped.push('');\n    }\n\n    wrapped.forEach(function (str, r) {\n      if (!rrows[r]) rrows.push([]);\n      rrow = rrows[r];\n\n      for (var i = 0; i < c; i++) {\n        if (rrow[i] === undefined) rrow.push('');\n      }\n\n      rrow.push(str);\n    });\n  });\n  return rrows;\n};\n\nUI.prototype._negatePadding = function (col) {\n  var wrapWidth = col.width;\n  if (col.padding) wrapWidth -= (col.padding[left] || 0) + (col.padding[right] || 0);\n  if (col.border) wrapWidth -= 4;\n  return wrapWidth;\n};\n\nUI.prototype._columnWidths = function (row) {\n  var _this = this;\n\n  var widths = [];\n  var unset = row.length;\n  var unsetWidth;\n  var remainingWidth = this.width; // column widths can be set in config.\n\n  row.forEach(function (col, i) {\n    if (col.width) {\n      unset--;\n      widths[i] = col.width;\n      remainingWidth -= col.width;\n    } else {\n      widths[i] = undefined;\n    }\n  }); // any unset widths should be calculated.\n\n  if (unset) unsetWidth = Math.floor(remainingWidth / unset);\n  widths.forEach(function (w, i) {\n    if (!_this.wrap) widths[i] = row[i].width || stringWidth(row[i].text);else if (w === undefined) widths[i] = Math.max(unsetWidth, _minWidth(row[i]));\n  });\n  return widths;\n}; // calculates the minimum width of\n// a column, based on padding preferences.\n\n\nfunction _minWidth(col) {\n  var padding = col.padding || [];\n  var minWidth = 1 + (padding[left] || 0) + (padding[right] || 0);\n  if (col.border) minWidth += 4;\n  return minWidth;\n}\n\nfunction alignRight(str, width) {\n  str = str.trim();\n  var padding = '';\n  var strWidth = stringWidth(str);\n\n  if (strWidth < width) {\n    padding = new Array(width - strWidth + 1).join(' ');\n  }\n\n  return padding + str;\n}\n\nfunction alignCenter(str, width) {\n  str = str.trim();\n  var padding = '';\n  var strWidth = stringWidth(str.trim());\n\n  if (strWidth < width) {\n    padding = new Array(parseInt((width - strWidth) / 2, 10) + 1).join(' ');\n  }\n\n  return padding + str;\n}\n\nmodule.exports = function (opts) {\n  opts = opts || {};\n  return new UI({\n    width: (opts || {}).width || 80,\n    wrap: typeof opts.wrap === 'boolean' ? opts.wrap : true\n  });\n};","map":{"version":3,"sources":["/home/marcel/Desktop/CobaProject/GUI backless-js/axsis/node_modules/curlconverter/node_modules/cliui/index.js"],"names":["stringWidth","require","stripAnsi","wrap","align","right","alignRight","center","alignCenter","top","bottom","left","UI","opts","width","rows","prototype","span","cols","div","apply","arguments","length","_shouldApplyLayoutDSL","_applyLayoutDSL","i","arg","undefined","push","_colFromString","test","str","_this","split","leftColumnWidth","forEach","row","columns","Math","min","floor","map","r","text","trim","padding","_measurePadding","noAnsi","match","toString","lines","rowToString","filter","line","hidden","join","rrows","_rasterize","ts","wrapWidth","rrow","col","c","_negatePadding","Array","addBorder","_renderInline","replace","style","border","source","previousLine","leadingWhitespace","target","targetTextWidth","trimRight","trimLeft","widths","_columnWidths","wrapped","hard","unshift","unset","unsetWidth","remainingWidth","w","max","_minWidth","minWidth","strWidth","parseInt","module","exports"],"mappings":"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","sourcesContent":["var stringWidth = require('string-width')\nvar stripAnsi = require('strip-ansi')\nvar wrap = require('wrap-ansi')\nvar align = {\n  right: alignRight,\n  center: alignCenter\n}\nvar top = 0\nvar right = 1\nvar bottom = 2\nvar left = 3\n\nfunction UI (opts) {\n  this.width = opts.width\n  this.wrap = opts.wrap\n  this.rows = []\n}\n\nUI.prototype.span = function () {\n  var cols = this.div.apply(this, arguments)\n  cols.span = true\n}\n\nUI.prototype.div = function () {\n  if (arguments.length === 0) this.div('')\n  if (this.wrap && this._shouldApplyLayoutDSL.apply(this, arguments)) {\n    return this._applyLayoutDSL(arguments[0])\n  }\n\n  var cols = []\n\n  for (var i = 0, arg; (arg = arguments[i]) !== undefined; i++) {\n    if (typeof arg === 'string') cols.push(this._colFromString(arg))\n    else cols.push(arg)\n  }\n\n  this.rows.push(cols)\n  return cols\n}\n\nUI.prototype._shouldApplyLayoutDSL = function () {\n  return arguments.length === 1 && typeof arguments[0] === 'string' &&\n    /[\\t\\n]/.test(arguments[0])\n}\n\nUI.prototype._applyLayoutDSL = function (str) {\n  var _this = this\n  var rows = str.split('\\n')\n  var leftColumnWidth = 0\n\n  // simple heuristic for layout, make sure the\n  // second column lines up along the left-hand.\n  // don't allow the first column to take up more\n  // than 50% of the screen.\n  rows.forEach(function (row) {\n    var columns = row.split('\\t')\n    if (columns.length > 1 && stringWidth(columns[0]) > leftColumnWidth) {\n      leftColumnWidth = Math.min(\n        Math.floor(_this.width * 0.5),\n        stringWidth(columns[0])\n      )\n    }\n  })\n\n  // generate a table:\n  //  replacing ' ' with padding calculations.\n  //  using the algorithmically generated width.\n  rows.forEach(function (row) {\n    var columns = row.split('\\t')\n    _this.div.apply(_this, columns.map(function (r, i) {\n      return {\n        text: r.trim(),\n        padding: _this._measurePadding(r),\n        width: (i === 0 && columns.length > 1) ? leftColumnWidth : undefined\n      }\n    }))\n  })\n\n  return this.rows[this.rows.length - 1]\n}\n\nUI.prototype._colFromString = function (str) {\n  return {\n    text: str,\n    padding: this._measurePadding(str)\n  }\n}\n\nUI.prototype._measurePadding = function (str) {\n  // measure padding without ansi escape codes\n  var noAnsi = stripAnsi(str)\n  return [0, noAnsi.match(/\\s*$/)[0].length, 0, noAnsi.match(/^\\s*/)[0].length]\n}\n\nUI.prototype.toString = function () {\n  var _this = this\n  var lines = []\n\n  _this.rows.forEach(function (row, i) {\n    _this.rowToString(row, lines)\n  })\n\n  // don't display any lines with the\n  // hidden flag set.\n  lines = lines.filter(function (line) {\n    return !line.hidden\n  })\n\n  return lines.map(function (line) {\n    return line.text\n  }).join('\\n')\n}\n\nUI.prototype.rowToString = function (row, lines) {\n  var _this = this\n  var padding\n  var rrows = this._rasterize(row)\n  var str = ''\n  var ts\n  var width\n  var wrapWidth\n\n  rrows.forEach(function (rrow, r) {\n    str = ''\n    rrow.forEach(function (col, c) {\n      ts = '' // temporary string used during alignment/padding.\n      width = row[c].width // the width with padding.\n      wrapWidth = _this._negatePadding(row[c]) // the width without padding.\n\n      ts += col\n\n      for (var i = 0; i < wrapWidth - stringWidth(col); i++) {\n        ts += ' '\n      }\n\n      // align the string within its column.\n      if (row[c].align && row[c].align !== 'left' && _this.wrap) {\n        ts = align[row[c].align](ts, wrapWidth)\n        if (stringWidth(ts) < wrapWidth) ts += new Array(width - stringWidth(ts)).join(' ')\n      }\n\n      // apply border and padding to string.\n      padding = row[c].padding || [0, 0, 0, 0]\n      if (padding[left]) str += new Array(padding[left] + 1).join(' ')\n      str += addBorder(row[c], ts, '| ')\n      str += ts\n      str += addBorder(row[c], ts, ' |')\n      if (padding[right]) str += new Array(padding[right] + 1).join(' ')\n\n      // if prior row is span, try to render the\n      // current row on the prior line.\n      if (r === 0 && lines.length > 0) {\n        str = _this._renderInline(str, lines[lines.length - 1])\n      }\n    })\n\n    // remove trailing whitespace.\n    lines.push({\n      text: str.replace(/ +$/, ''),\n      span: row.span\n    })\n  })\n\n  return lines\n}\n\nfunction addBorder (col, ts, style) {\n  if (col.border) {\n    if (/[.']-+[.']/.test(ts)) return ''\n    else if (ts.trim().length) return style\n    else return '  '\n  }\n  return ''\n}\n\n// if the full 'source' can render in\n// the target line, do so.\nUI.prototype._renderInline = function (source, previousLine) {\n  var leadingWhitespace = source.match(/^ */)[0].length\n  var target = previousLine.text\n  var targetTextWidth = stringWidth(target.trimRight())\n\n  if (!previousLine.span) return source\n\n  // if we're not applying wrapping logic,\n  // just always append to the span.\n  if (!this.wrap) {\n    previousLine.hidden = true\n    return target + source\n  }\n\n  if (leadingWhitespace < targetTextWidth) return source\n\n  previousLine.hidden = true\n\n  return target.trimRight() + new Array(leadingWhitespace - targetTextWidth + 1).join(' ') + source.trimLeft()\n}\n\nUI.prototype._rasterize = function (row) {\n  var _this = this\n  var i\n  var rrow\n  var rrows = []\n  var widths = this._columnWidths(row)\n  var wrapped\n\n  // word wrap all columns, and create\n  // a data-structure that is easy to rasterize.\n  row.forEach(function (col, c) {\n    // leave room for left and right padding.\n    col.width = widths[c]\n    if (_this.wrap) wrapped = wrap(col.text, _this._negatePadding(col), {hard: true}).split('\\n')\n    else wrapped = col.text.split('\\n')\n\n    if (col.border) {\n      wrapped.unshift('.' + new Array(_this._negatePadding(col) + 3).join('-') + '.')\n      wrapped.push(\"'\" + new Array(_this._negatePadding(col) + 3).join('-') + \"'\")\n    }\n\n    // add top and bottom padding.\n    if (col.padding) {\n      for (i = 0; i < (col.padding[top] || 0); i++) wrapped.unshift('')\n      for (i = 0; i < (col.padding[bottom] || 0); i++) wrapped.push('')\n    }\n\n    wrapped.forEach(function (str, r) {\n      if (!rrows[r]) rrows.push([])\n\n      rrow = rrows[r]\n\n      for (var i = 0; i < c; i++) {\n        if (rrow[i] === undefined) rrow.push('')\n      }\n      rrow.push(str)\n    })\n  })\n\n  return rrows\n}\n\nUI.prototype._negatePadding = function (col) {\n  var wrapWidth = col.width\n  if (col.padding) wrapWidth -= (col.padding[left] || 0) + (col.padding[right] || 0)\n  if (col.border) wrapWidth -= 4\n  return wrapWidth\n}\n\nUI.prototype._columnWidths = function (row) {\n  var _this = this\n  var widths = []\n  var unset = row.length\n  var unsetWidth\n  var remainingWidth = this.width\n\n  // column widths can be set in config.\n  row.forEach(function (col, i) {\n    if (col.width) {\n      unset--\n      widths[i] = col.width\n      remainingWidth -= col.width\n    } else {\n      widths[i] = undefined\n    }\n  })\n\n  // any unset widths should be calculated.\n  if (unset) unsetWidth = Math.floor(remainingWidth / unset)\n  widths.forEach(function (w, i) {\n    if (!_this.wrap) widths[i] = row[i].width || stringWidth(row[i].text)\n    else if (w === undefined) widths[i] = Math.max(unsetWidth, _minWidth(row[i]))\n  })\n\n  return widths\n}\n\n// calculates the minimum width of\n// a column, based on padding preferences.\nfunction _minWidth (col) {\n  var padding = col.padding || []\n  var minWidth = 1 + (padding[left] || 0) + (padding[right] || 0)\n  if (col.border) minWidth += 4\n  return minWidth\n}\n\nfunction alignRight (str, width) {\n  str = str.trim()\n  var padding = ''\n  var strWidth = stringWidth(str)\n\n  if (strWidth < width) {\n    padding = new Array(width - strWidth + 1).join(' ')\n  }\n\n  return padding + str\n}\n\nfunction alignCenter (str, width) {\n  str = str.trim()\n  var padding = ''\n  var strWidth = stringWidth(str.trim())\n\n  if (strWidth < width) {\n    padding = new Array(parseInt((width - strWidth) / 2, 10) + 1).join(' ')\n  }\n\n  return padding + str\n}\n\nmodule.exports = function (opts) {\n  opts = opts || {}\n\n  return new UI({\n    width: (opts || {}).width || 80,\n    wrap: typeof opts.wrap === 'boolean' ? opts.wrap : true\n  })\n}\n"]},"metadata":{},"sourceType":"script"}