{"ast":null,"code":"const util = require('../util');\n\nconst jsesc = require('jsesc');\n\nconst querystring = require('querystring');\n\nrequire('string.prototype.startswith');\n\nfunction repr(value) {\n  // In context of url parameters, don't accept nulls and such.\n  if (!value) {\n    return \"''\";\n  } else {\n    return \"'\" + jsesc(value, {\n      quotes: 'single'\n    }) + \"'\";\n  }\n}\n\nfunction getQueryDict(request) {\n  let queryDict = 'params = (\\n';\n\n  for (const paramName in request.query) {\n    const rawValue = request.query[paramName];\n    let paramValue;\n\n    if (Array.isArray(rawValue)) {\n      paramValue = '[' + rawValue.map(repr).join(', ') + ']';\n    } else {\n      paramValue = repr(rawValue);\n    }\n\n    queryDict += '    (' + repr(paramName) + ', ' + paramValue + '),\\n';\n  }\n\n  queryDict += ')\\n';\n  return queryDict;\n}\n\nfunction getDataString(request) {\n  if (typeof request.data === 'number') {\n    request.data = request.data.toString();\n  }\n\n  if (request.data.startsWith('@')) {\n    const filePath = request.data.slice(1);\n\n    if (request.isDataBinary) {\n      return 'data = open(\\'' + filePath + '\\', \\'rb\\').read()';\n    } else {\n      return 'data = open(\\'' + filePath + '\\')';\n    }\n  }\n\n  const parsedQueryString = querystring.parse(request.data);\n  const keyCount = Object.keys(parsedQueryString).length;\n  const singleKeyOnly = keyCount === 1 && !parsedQueryString[Object.keys(parsedQueryString)[0]];\n  const singularData = request.isDataBinary || singleKeyOnly;\n\n  if (singularData) {\n    return 'data = ' + repr(request.data) + '\\n';\n  } else {\n    return getMultipleDataString(request, parsedQueryString);\n  }\n}\n\nfunction getMultipleDataString(request, parsedQueryString) {\n  let repeatedKey = false;\n\n  for (const key in parsedQueryString) {\n    const value = parsedQueryString[key];\n\n    if (Array.isArray(value)) {\n      repeatedKey = true;\n    }\n  }\n\n  let dataString;\n\n  if (repeatedKey) {\n    dataString = 'data = [\\n';\n\n    for (const key in parsedQueryString) {\n      const value = parsedQueryString[key];\n\n      if (Array.isArray(value)) {\n        for (let i = 0; i < value.length; i++) {\n          dataString += '  (' + repr(key) + ', ' + repr(value[i]) + '),\\n';\n        }\n      } else {\n        dataString += '  (' + repr(key) + ', ' + repr(value) + '),\\n';\n      }\n    }\n\n    dataString += ']\\n';\n  } else {\n    dataString = 'data = {\\n';\n    const elementCount = Object.keys(parsedQueryString).length;\n    let i = 0;\n\n    for (const key in parsedQueryString) {\n      const value = parsedQueryString[key];\n      dataString += '  ' + repr(key) + ': ' + repr(value);\n\n      if (i === elementCount - 1) {\n        dataString += '\\n';\n      } else {\n        dataString += ',\\n';\n      }\n\n      ++i;\n    }\n\n    dataString += '}\\n';\n  }\n\n  return dataString;\n}\n\nfunction getFilesString(request) {\n  // http://docs.python-requests.org/en/master/user/quickstart/#post-a-multipart-encoded-file\n  let filesString = 'files = {\\n';\n\n  for (const multipartKey in request.multipartUploads) {\n    const multipartValue = request.multipartUploads[multipartKey];\n\n    if (multipartValue.startsWith('@')) {\n      const fileName = multipartValue.slice(1);\n      filesString += '    ' + repr(multipartKey) + ': (' + repr(fileName) + ', open(' + repr(fileName) + \", 'rb')),\\n\";\n    } else {\n      filesString += '    ' + repr(multipartKey) + ': (None, ' + repr(multipartValue) + '),\\n';\n    }\n  }\n\n  filesString += '}\\n';\n  return filesString;\n}\n\nconst toPython = curlCommand => {\n  const request = util.parseCurlCommand(curlCommand);\n  let cookieDict;\n\n  if (request.cookies) {\n    cookieDict = 'cookies = {\\n';\n\n    for (const cookieName in request.cookies) {\n      cookieDict += '    ' + repr(cookieName) + ': ' + repr(request.cookies[cookieName]) + ',\\n';\n    }\n\n    cookieDict += '}\\n';\n  }\n\n  let headerDict;\n\n  if (request.headers) {\n    headerDict = 'headers = {\\n';\n\n    for (const headerName in request.headers) {\n      headerDict += '    ' + repr(headerName) + ': ' + repr(request.headers[headerName]) + ',\\n';\n    }\n\n    headerDict += '}\\n';\n  }\n\n  let queryDict;\n\n  if (request.query) {\n    queryDict = getQueryDict(request);\n  }\n\n  let dataString;\n  let filesString;\n\n  if (typeof request.data === 'string' || typeof request.data === 'number') {\n    dataString = getDataString(request);\n  } else if (request.multipartUploads) {\n    filesString = getFilesString(request);\n  } // curl automatically prepends 'http' if the scheme is missing, but python fails and returns an error\n  // we tack it on here to mimic curl\n\n\n  if (request.url.indexOf('http') !== 0) {\n    request.url = 'http://' + request.url;\n  }\n\n  if (request.urlWithoutQuery.indexOf('http') !== 0) {\n    request.urlWithoutQuery = 'http://' + request.urlWithoutQuery;\n  }\n\n  let requestLineWithUrlParams = 'response = requests.' + request.method + '(\\'' + request.urlWithoutQuery + '\\'';\n  let requestLineWithOriginalUrl = 'response = requests.' + request.method + '(\\'' + request.url + '\\'';\n  let requestLineBody = '';\n\n  if (request.headers) {\n    requestLineBody += ', headers=headers';\n  }\n\n  if (request.query) {\n    requestLineBody += ', params=params';\n  }\n\n  if (request.cookies) {\n    requestLineBody += ', cookies=cookies';\n  }\n\n  if (typeof request.data === 'string') {\n    requestLineBody += ', data=data';\n  } else if (request.multipartUploads) {\n    requestLineBody += ', files=files';\n  }\n\n  if (request.insecure) {\n    requestLineBody += ', verify=False';\n  }\n\n  if (request.auth) {\n    const splitAuth = request.auth.split(':');\n    const user = splitAuth[0] || '';\n    const password = splitAuth[1] || '';\n    requestLineBody += ', auth=(' + repr(user) + ', ' + repr(password) + ')';\n  }\n\n  requestLineBody += ')';\n  requestLineWithOriginalUrl += requestLineBody.replace(', params=params', '');\n  requestLineWithUrlParams += requestLineBody;\n  let pythonCode = '';\n  pythonCode += 'import requests\\n\\n';\n\n  if (cookieDict) {\n    pythonCode += cookieDict + '\\n';\n  }\n\n  if (headerDict) {\n    pythonCode += headerDict + '\\n';\n  }\n\n  if (queryDict) {\n    pythonCode += queryDict + '\\n';\n  }\n\n  if (dataString) {\n    pythonCode += dataString + '\\n';\n  } else if (filesString) {\n    pythonCode += filesString + '\\n';\n  }\n\n  pythonCode += requestLineWithUrlParams;\n\n  if (request.query) {\n    pythonCode += '\\n\\n' + '#NB. Original query string below. It seems impossible to parse and\\n' + '#reproduce query strings 100% accurately so the one below is given\\n' + '#in case the reproduced version is not \"correct\".\\n';\n    pythonCode += '# ' + requestLineWithOriginalUrl;\n  }\n\n  return pythonCode + '\\n';\n};\n\nmodule.exports = toPython;","map":{"version":3,"sources":["/home/marcel/Desktop/CobaProject/GUI backless-js/axsis/node_modules/curlconverter/generators/python.js"],"names":["util","require","jsesc","querystring","repr","value","quotes","getQueryDict","request","queryDict","paramName","query","rawValue","paramValue","Array","isArray","map","join","getDataString","data","toString","startsWith","filePath","slice","isDataBinary","parsedQueryString","parse","keyCount","Object","keys","length","singleKeyOnly","singularData","getMultipleDataString","repeatedKey","key","dataString","i","elementCount","getFilesString","filesString","multipartKey","multipartUploads","multipartValue","fileName","toPython","curlCommand","parseCurlCommand","cookieDict","cookies","cookieName","headerDict","headers","headerName","url","indexOf","urlWithoutQuery","requestLineWithUrlParams","method","requestLineWithOriginalUrl","requestLineBody","insecure","auth","splitAuth","split","user","password","replace","pythonCode","module","exports"],"mappings":"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","sourcesContent":["const util = require('../util')\nconst jsesc = require('jsesc')\nconst querystring = require('querystring')\n\nrequire('string.prototype.startswith')\n\nfunction repr (value) {\n  // In context of url parameters, don't accept nulls and such.\n  if (!value) {\n    return \"''\"\n  } else {\n    return \"'\" + jsesc(value, { quotes: 'single' }) + \"'\"\n  }\n}\n\nfunction getQueryDict (request) {\n  let queryDict = 'params = (\\n'\n  for (const paramName in request.query) {\n    const rawValue = request.query[paramName]\n    let paramValue\n    if (Array.isArray(rawValue)) {\n      paramValue = '[' + rawValue.map(repr).join(', ') + ']'\n    } else {\n      paramValue = repr(rawValue)\n    }\n    queryDict += '    (' + repr(paramName) + ', ' + paramValue + '),\\n'\n  }\n  queryDict += ')\\n'\n  return queryDict\n}\n\nfunction getDataString (request) {\n  if (typeof request.data === 'number') {\n    request.data = request.data.toString()\n  }\n  if (request.data.startsWith('@')) {\n    const filePath = request.data.slice(1)\n    if (request.isDataBinary) {\n      return 'data = open(\\'' + filePath + '\\', \\'rb\\').read()'\n    } else {\n      return 'data = open(\\'' + filePath + '\\')'\n    }\n  }\n\n  const parsedQueryString = querystring.parse(request.data)\n  const keyCount = Object.keys(parsedQueryString).length\n  const singleKeyOnly = keyCount === 1 && !parsedQueryString[Object.keys(parsedQueryString)[0]]\n  const singularData = request.isDataBinary || singleKeyOnly\n  if (singularData) {\n    return 'data = ' + repr(request.data) + '\\n'\n  } else {\n    return getMultipleDataString(request, parsedQueryString)\n  }\n}\n\nfunction getMultipleDataString (request, parsedQueryString) {\n  let repeatedKey = false\n  for (const key in parsedQueryString) {\n    const value = parsedQueryString[key]\n    if (Array.isArray(value)) {\n      repeatedKey = true\n    }\n  }\n\n  let dataString\n  if (repeatedKey) {\n    dataString = 'data = [\\n'\n    for (const key in parsedQueryString) {\n      const value = parsedQueryString[key]\n      if (Array.isArray(value)) {\n        for (let i = 0; i < value.length; i++) {\n          dataString += '  (' + repr(key) + ', ' + repr(value[i]) + '),\\n'\n        }\n      } else {\n        dataString += '  (' + repr(key) + ', ' + repr(value) + '),\\n'\n      }\n    }\n    dataString += ']\\n'\n  } else {\n    dataString = 'data = {\\n'\n    const elementCount = Object.keys(parsedQueryString).length\n    let i = 0\n    for (const key in parsedQueryString) {\n      const value = parsedQueryString[key]\n      dataString += '  ' + repr(key) + ': ' + repr(value)\n      if (i === elementCount - 1) {\n        dataString += '\\n'\n      } else {\n        dataString += ',\\n'\n      }\n      ++i\n    }\n    dataString += '}\\n'\n  }\n\n  return dataString\n}\n\nfunction getFilesString (request) {\n  // http://docs.python-requests.org/en/master/user/quickstart/#post-a-multipart-encoded-file\n  let filesString = 'files = {\\n'\n  for (const multipartKey in request.multipartUploads) {\n    const multipartValue = request.multipartUploads[multipartKey]\n    if (multipartValue.startsWith('@')) {\n      const fileName = multipartValue.slice(1)\n      filesString += '    ' + repr(multipartKey) + ': (' + repr(fileName) + ', open(' + repr(fileName) + \", 'rb')),\\n\"\n    } else {\n      filesString += '    ' + repr(multipartKey) + ': (None, ' + repr(multipartValue) + '),\\n'\n    }\n  }\n  filesString += '}\\n'\n\n  return filesString\n}\n\nconst toPython = curlCommand => {\n  const request = util.parseCurlCommand(curlCommand)\n  let cookieDict\n  if (request.cookies) {\n    cookieDict = 'cookies = {\\n'\n    for (const cookieName in request.cookies) {\n      cookieDict += '    ' + repr(cookieName) + ': ' + repr(request.cookies[cookieName]) + ',\\n'\n    }\n    cookieDict += '}\\n'\n  }\n  let headerDict\n  if (request.headers) {\n    headerDict = 'headers = {\\n'\n    for (const headerName in request.headers) {\n      headerDict += '    ' + repr(headerName) + ': ' + repr(request.headers[headerName]) + ',\\n'\n    }\n    headerDict += '}\\n'\n  }\n\n  let queryDict\n  if (request.query) {\n    queryDict = getQueryDict(request)\n  }\n\n  let dataString\n  let filesString\n  if (typeof request.data === 'string' || typeof request.data === 'number') {\n    dataString = getDataString(request)\n  } else if (request.multipartUploads) {\n    filesString = getFilesString(request)\n  }\n  // curl automatically prepends 'http' if the scheme is missing, but python fails and returns an error\n  // we tack it on here to mimic curl\n  if (request.url.indexOf('http') !== 0) {\n    request.url = 'http://' + request.url\n  }\n  if (request.urlWithoutQuery.indexOf('http') !== 0) {\n    request.urlWithoutQuery = 'http://' + request.urlWithoutQuery\n  }\n  let requestLineWithUrlParams = 'response = requests.' + request.method + '(\\'' + request.urlWithoutQuery + '\\''\n  let requestLineWithOriginalUrl = 'response = requests.' + request.method + '(\\'' + request.url + '\\''\n\n  let requestLineBody = ''\n  if (request.headers) {\n    requestLineBody += ', headers=headers'\n  }\n  if (request.query) {\n    requestLineBody += ', params=params'\n  }\n  if (request.cookies) {\n    requestLineBody += ', cookies=cookies'\n  }\n  if (typeof request.data === 'string') {\n    requestLineBody += ', data=data'\n  } else if (request.multipartUploads) {\n    requestLineBody += ', files=files'\n  }\n  if (request.insecure) {\n    requestLineBody += ', verify=False'\n  }\n  if (request.auth) {\n    const splitAuth = request.auth.split(':')\n    const user = splitAuth[0] || ''\n    const password = splitAuth[1] || ''\n    requestLineBody += ', auth=(' + repr(user) + ', ' + repr(password) + ')'\n  }\n  requestLineBody += ')'\n\n  requestLineWithOriginalUrl += requestLineBody.replace(', params=params', '')\n  requestLineWithUrlParams += requestLineBody\n\n  let pythonCode = ''\n  pythonCode += 'import requests\\n\\n'\n  if (cookieDict) {\n    pythonCode += cookieDict + '\\n'\n  }\n  if (headerDict) {\n    pythonCode += headerDict + '\\n'\n  }\n  if (queryDict) {\n    pythonCode += queryDict + '\\n'\n  }\n  if (dataString) {\n    pythonCode += dataString + '\\n'\n  } else if (filesString) {\n    pythonCode += filesString + '\\n'\n  }\n  pythonCode += requestLineWithUrlParams\n\n  if (request.query) {\n    pythonCode += '\\n\\n' +\n            '#NB. Original query string below. It seems impossible to parse and\\n' +\n            '#reproduce query strings 100% accurately so the one below is given\\n' +\n            '#in case the reproduced version is not \"correct\".\\n'\n    pythonCode += '# ' + requestLineWithOriginalUrl\n  }\n\n  return pythonCode + '\\n'\n}\n\nmodule.exports = toPython\n"]},"metadata":{},"sourceType":"script"}