{"ast":null,"code":"// Generated by CoffeeScript 1.12.4\nvar Escaper, Pattern;\nPattern = require('./Pattern');\n\nEscaper = function () {\n  var ch;\n\n  function Escaper() {}\n\n  Escaper.LIST_ESCAPEES = ['\\\\', '\\\\\\\\', '\\\\\"', '\"', \"\\x00\", \"\\x01\", \"\\x02\", \"\\x03\", \"\\x04\", \"\\x05\", \"\\x06\", \"\\x07\", \"\\x08\", \"\\x09\", \"\\x0a\", \"\\x0b\", \"\\x0c\", \"\\x0d\", \"\\x0e\", \"\\x0f\", \"\\x10\", \"\\x11\", \"\\x12\", \"\\x13\", \"\\x14\", \"\\x15\", \"\\x16\", \"\\x17\", \"\\x18\", \"\\x19\", \"\\x1a\", \"\\x1b\", \"\\x1c\", \"\\x1d\", \"\\x1e\", \"\\x1f\", (ch = String.fromCharCode)(0x0085), ch(0x00A0), ch(0x2028), ch(0x2029)];\n  Escaper.LIST_ESCAPED = ['\\\\\\\\', '\\\\\"', '\\\\\"', '\\\\\"', \"\\\\0\", \"\\\\x01\", \"\\\\x02\", \"\\\\x03\", \"\\\\x04\", \"\\\\x05\", \"\\\\x06\", \"\\\\a\", \"\\\\b\", \"\\\\t\", \"\\\\n\", \"\\\\v\", \"\\\\f\", \"\\\\r\", \"\\\\x0e\", \"\\\\x0f\", \"\\\\x10\", \"\\\\x11\", \"\\\\x12\", \"\\\\x13\", \"\\\\x14\", \"\\\\x15\", \"\\\\x16\", \"\\\\x17\", \"\\\\x18\", \"\\\\x19\", \"\\\\x1a\", \"\\\\e\", \"\\\\x1c\", \"\\\\x1d\", \"\\\\x1e\", \"\\\\x1f\", \"\\\\N\", \"\\\\_\", \"\\\\L\", \"\\\\P\"];\n\n  Escaper.MAPPING_ESCAPEES_TO_ESCAPED = function () {\n    var i, j, mapping, ref;\n    mapping = {};\n\n    for (i = j = 0, ref = Escaper.LIST_ESCAPEES.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n      mapping[Escaper.LIST_ESCAPEES[i]] = Escaper.LIST_ESCAPED[i];\n    }\n\n    return mapping;\n  }();\n\n  Escaper.PATTERN_CHARACTERS_TO_ESCAPE = new Pattern('[\\\\x00-\\\\x1f]|\\xc2\\x85|\\xc2\\xa0|\\xe2\\x80\\xa8|\\xe2\\x80\\xa9');\n  Escaper.PATTERN_MAPPING_ESCAPEES = new Pattern(Escaper.LIST_ESCAPEES.join('|').split('\\\\').join('\\\\\\\\'));\n  Escaper.PATTERN_SINGLE_QUOTING = new Pattern('[\\\\s\\'\":{}[\\\\],&*#?]|^[-?|<>=!%@`]');\n\n  Escaper.requiresDoubleQuoting = function (value) {\n    return this.PATTERN_CHARACTERS_TO_ESCAPE.test(value);\n  };\n\n  Escaper.escapeWithDoubleQuotes = function (value) {\n    var result;\n    result = this.PATTERN_MAPPING_ESCAPEES.replace(value, function (_this) {\n      return function (str) {\n        return _this.MAPPING_ESCAPEES_TO_ESCAPED[str];\n      };\n    }(this));\n    return '\"' + result + '\"';\n  };\n\n  Escaper.requiresSingleQuoting = function (value) {\n    return this.PATTERN_SINGLE_QUOTING.test(value);\n  };\n\n  Escaper.escapeWithSingleQuotes = function (value) {\n    return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n  };\n\n  return Escaper;\n}();\n\nmodule.exports = Escaper;","map":{"version":3,"sources":["/home/marcel/Desktop/CobaProject/GUI backless-js/axsis/node_modules/yamljs/lib/Escaper.js"],"names":["Escaper","Pattern","require","ch","LIST_ESCAPEES","String","fromCharCode","LIST_ESCAPED","MAPPING_ESCAPEES_TO_ESCAPED","i","j","mapping","ref","length","PATTERN_CHARACTERS_TO_ESCAPE","PATTERN_MAPPING_ESCAPEES","join","split","PATTERN_SINGLE_QUOTING","requiresDoubleQuoting","value","test","escapeWithDoubleQuotes","result","replace","_this","str","requiresSingleQuoting","escapeWithSingleQuotes","module","exports"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 1.12.4\nvar Escaper, Pattern;\n\nPattern = require('./Pattern');\n\nEscaper = (function() {\n  var ch;\n\n  function Escaper() {}\n\n  Escaper.LIST_ESCAPEES = ['\\\\', '\\\\\\\\', '\\\\\"', '\"', \"\\x00\", \"\\x01\", \"\\x02\", \"\\x03\", \"\\x04\", \"\\x05\", \"\\x06\", \"\\x07\", \"\\x08\", \"\\x09\", \"\\x0a\", \"\\x0b\", \"\\x0c\", \"\\x0d\", \"\\x0e\", \"\\x0f\", \"\\x10\", \"\\x11\", \"\\x12\", \"\\x13\", \"\\x14\", \"\\x15\", \"\\x16\", \"\\x17\", \"\\x18\", \"\\x19\", \"\\x1a\", \"\\x1b\", \"\\x1c\", \"\\x1d\", \"\\x1e\", \"\\x1f\", (ch = String.fromCharCode)(0x0085), ch(0x00A0), ch(0x2028), ch(0x2029)];\n\n  Escaper.LIST_ESCAPED = ['\\\\\\\\', '\\\\\"', '\\\\\"', '\\\\\"', \"\\\\0\", \"\\\\x01\", \"\\\\x02\", \"\\\\x03\", \"\\\\x04\", \"\\\\x05\", \"\\\\x06\", \"\\\\a\", \"\\\\b\", \"\\\\t\", \"\\\\n\", \"\\\\v\", \"\\\\f\", \"\\\\r\", \"\\\\x0e\", \"\\\\x0f\", \"\\\\x10\", \"\\\\x11\", \"\\\\x12\", \"\\\\x13\", \"\\\\x14\", \"\\\\x15\", \"\\\\x16\", \"\\\\x17\", \"\\\\x18\", \"\\\\x19\", \"\\\\x1a\", \"\\\\e\", \"\\\\x1c\", \"\\\\x1d\", \"\\\\x1e\", \"\\\\x1f\", \"\\\\N\", \"\\\\_\", \"\\\\L\", \"\\\\P\"];\n\n  Escaper.MAPPING_ESCAPEES_TO_ESCAPED = (function() {\n    var i, j, mapping, ref;\n    mapping = {};\n    for (i = j = 0, ref = Escaper.LIST_ESCAPEES.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n      mapping[Escaper.LIST_ESCAPEES[i]] = Escaper.LIST_ESCAPED[i];\n    }\n    return mapping;\n  })();\n\n  Escaper.PATTERN_CHARACTERS_TO_ESCAPE = new Pattern('[\\\\x00-\\\\x1f]|\\xc2\\x85|\\xc2\\xa0|\\xe2\\x80\\xa8|\\xe2\\x80\\xa9');\n\n  Escaper.PATTERN_MAPPING_ESCAPEES = new Pattern(Escaper.LIST_ESCAPEES.join('|').split('\\\\').join('\\\\\\\\'));\n\n  Escaper.PATTERN_SINGLE_QUOTING = new Pattern('[\\\\s\\'\":{}[\\\\],&*#?]|^[-?|<>=!%@`]');\n\n  Escaper.requiresDoubleQuoting = function(value) {\n    return this.PATTERN_CHARACTERS_TO_ESCAPE.test(value);\n  };\n\n  Escaper.escapeWithDoubleQuotes = function(value) {\n    var result;\n    result = this.PATTERN_MAPPING_ESCAPEES.replace(value, (function(_this) {\n      return function(str) {\n        return _this.MAPPING_ESCAPEES_TO_ESCAPED[str];\n      };\n    })(this));\n    return '\"' + result + '\"';\n  };\n\n  Escaper.requiresSingleQuoting = function(value) {\n    return this.PATTERN_SINGLE_QUOTING.test(value);\n  };\n\n  Escaper.escapeWithSingleQuotes = function(value) {\n    return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n  };\n\n  return Escaper;\n\n})();\n\nmodule.exports = Escaper;\n"]},"metadata":{},"sourceType":"script"}