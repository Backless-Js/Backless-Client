{"ast":null,"code":"const {\n  repr,\n  setVariableValue,\n  callFunction,\n  structify,\n  containsBody,\n  prepareQueryString,\n  prepareCookies,\n  cookieString\n} = require('./common');\n\nconst prepareHeaders = request => {\n  let response = null;\n\n  if (request.headers) {\n    const headerEntries = Object.entries(request.headers); // cookies are part of headers\n\n    const headerCount = headerEntries.length + (request.cookies ? 1 : 0);\n    const headers = [];\n    let header = headerCount === 1 ? '' : '[';\n\n    for (const [key, value] of headerEntries) {\n      switch (key) {\n        case 'Cookie':\n          break;\n\n        case 'Accept':\n          {\n            const accepts = value.split(',');\n\n            if (accepts.length === 1) {\n              headers.push(`field.AcceptField(MediaType(${repr(value)}))`);\n            } else {\n              let acceptheader = 'field.AcceptField([';\n\n              for (const accept of accepts) {\n                acceptheader += `\\n        MediaType(${repr(accept.trim())})`;\n              }\n\n              acceptheader += '\\n    ])';\n              headers.push(acceptheader);\n            }\n\n            break;\n          }\n\n        default:\n          headers.push(`HeaderField(${repr(key)}, ${repr(value)})`);\n      }\n    }\n\n    if (headerCount === 1) {\n      header += headers.pop();\n    } else {\n      header += '\\n    ' + headers.join('\\n    ');\n\n      if (request.cookies) {\n        const cookieFieldParams = callFunction(null, 'cellfun', ['@(x) Cookie(x{:})', callFunction(null, 'num2cell', ['cookies', '2'], '')], '');\n        header += '\\n    ' + callFunction(null, 'field.CookieField', cookieFieldParams, '');\n      }\n\n      header += '\\n]\\'';\n    }\n\n    response = setVariableValue('header', header);\n  }\n\n  return response;\n};\n\nconst prepareURI = request => {\n  const uriParams = [repr(request.urlWithoutQuery)];\n\n  if (request.query) {\n    uriParams.push('QueryParameter(params\\')');\n  }\n\n  return callFunction('uri', 'URI', uriParams);\n};\n\nconst prepareAuth = request => {\n  let options = [];\n  let optionsParams = [];\n\n  if (request.auth) {\n    const [usr, pass] = request.auth.split(':');\n    const userfield = `'Username', ${repr(usr)}`;\n    const passfield = `'Password', ${repr(pass)}`;\n    const authparams = (usr ? `${userfield}, ` : '') + passfield;\n    optionsParams.push(repr('Credentials'), 'cred');\n    options.push(callFunction('cred', 'Credentials', authparams));\n  }\n\n  if (request.insecure) {\n    optionsParams.push(repr('VerifyServerName'), 'false');\n  }\n\n  if (optionsParams.length > 0) {\n    options.push(callFunction('options', 'HTTPOptions', optionsParams));\n  }\n\n  return options;\n};\n\nconst prepareMultipartUploads = request => {\n  let response = null;\n\n  if (request.multipartUploads) {\n    const params = [];\n\n    for (const [key, value] of Object.entries(request.multipartUploads)) {\n      const pair = [];\n      pair.push(repr(key));\n      const fileProvider = prepareDataProvider(value, null, '', 1);\n      pair.push(fileProvider);\n      params.push(pair);\n    }\n\n    response = callFunction('body', 'MultipartFormProvider', params);\n  }\n\n  return response;\n};\n\nconst isJsonString = str => {\n  // Source: https://stackoverflow.com/a/3710226/5625738\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};\n\nconst prepareDataProvider = (value, output, termination, indentLevel, isDataBinary) => {\n  if (typeof indentLevel === 'undefined' || indentLevel === null) indentLevel = 0;\n  if (typeof isDataBinary === 'undefined') isDataBinary = true;\n\n  if (value[0] === '@') {\n    const filename = value.slice(1); // >> imformats % for seeing MATLAB supported image formats\n\n    const isImageProvider = new Set(['jpeg', 'jpg', 'png', 'tif', 'gif']).has(filename.split('.')[1]);\n    const provider = isImageProvider ? 'ImageProvider' : 'FileProvider';\n\n    if (!isDataBinary) {\n      return [callFunction(output, 'fileread', repr(filename)), setVariableValue(`${output}(${output}==13 | ${output}==10)`, '[]')];\n    }\n\n    return callFunction(output, provider, repr(filename), termination);\n  }\n\n  if (value === true) {\n    return callFunction(output, 'FileProvider', '', termination);\n  }\n\n  if (typeof value !== 'number' && isJsonString(value)) {\n    const obj = JSON.parse(value); // If fail to create a struct for the JSON, then return a string\n\n    try {\n      const structure = structify(obj, indentLevel);\n      return callFunction(output, 'JSONProvider', structure, termination);\n    } catch (e) {\n      return callFunction(output, 'StringProvider', repr(value), termination);\n    }\n  }\n\n  if (typeof value === 'number') {\n    return callFunction(output, 'FormProvider', repr(value), termination);\n  }\n\n  const formValue = value.split('&').map(x => x.split('=').map(x => repr(x)));\n  return callFunction(output, 'FormProvider', formValue, termination);\n};\n\nconst prepareData = request => {\n  let response = null;\n\n  if (request.dataArray) {\n    const data = request.dataArray.map(x => x.split('=').map(x => {\n      let ans = repr(x);\n\n      try {\n        const jsonData = JSON.parse(x);\n\n        if (typeof jsonData === 'object') {\n          ans = callFunction(null, 'JSONProvider', structify(jsonData, 1), '');\n        }\n      } catch (e) {}\n\n      return ans;\n    }));\n    response = callFunction('body', 'FormProvider', data);\n  } else if (request.data) {\n    response = prepareDataProvider(request.data, 'body', ';', 0, !!request.isDataBinary);\n\n    if (!response) {\n      response = setVariableValue('body', repr(request.data));\n    }\n  }\n\n  return response;\n};\n\nconst prepareRequestMessage = request => {\n  let reqMessage = [repr(request.method)];\n\n  if (request.cookie || request.headers) {\n    reqMessage.push('header');\n  } else if (request.method === 'get') {\n    reqMessage = '';\n  }\n\n  if (containsBody(request)) {\n    if (reqMessage.length === 1) {\n      reqMessage.push('[]');\n    }\n\n    reqMessage.push('body');\n  } // list as many params as necessary\n\n\n  const params = ['uri.EncodedURI'];\n\n  if (request.auth || request.insecure) {\n    params.push('options');\n  }\n\n  const response = [callFunction('response', 'RequestMessage', reqMessage, callFunction(null, '.send', params))];\n  return response.join('\\n');\n};\n\nconst toHTTPInterface = request => {\n  return ['%% HTTP Interface', 'import matlab.net.*', 'import matlab.net.http.*', containsBody(request) ? 'import matlab.net.http.io.*' : null, '', prepareQueryString(request), prepareCookies(request), prepareHeaders(request), prepareURI(request), prepareAuth(request), prepareMultipartUploads(request), prepareData(request), prepareRequestMessage(request), ''];\n};\n\nmodule.exports = toHTTPInterface;","map":{"version":3,"sources":["/home/marcel/Desktop/CobaProject/GUI backless-js/axsis/node_modules/curlconverter/generators/matlab/httpinterface.js"],"names":["repr","setVariableValue","callFunction","structify","containsBody","prepareQueryString","prepareCookies","cookieString","require","prepareHeaders","request","response","headers","headerEntries","Object","entries","headerCount","length","cookies","header","key","value","accepts","split","push","acceptheader","accept","trim","pop","join","cookieFieldParams","prepareURI","uriParams","urlWithoutQuery","query","prepareAuth","options","optionsParams","auth","usr","pass","userfield","passfield","authparams","insecure","prepareMultipartUploads","multipartUploads","params","pair","fileProvider","prepareDataProvider","isJsonString","str","JSON","parse","e","output","termination","indentLevel","isDataBinary","filename","slice","isImageProvider","Set","has","provider","obj","structure","formValue","map","x","prepareData","dataArray","data","ans","jsonData","prepareRequestMessage","reqMessage","method","cookie","toHTTPInterface","module","exports"],"mappings":"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","sourcesContent":["const {\n  repr, setVariableValue,\n  callFunction,\n  structify, containsBody,\n  prepareQueryString, prepareCookies,\n  cookieString\n} = require('./common')\n\nconst prepareHeaders = (request) => {\n  let response = null\n\n  if (request.headers) {\n    const headerEntries = Object.entries(request.headers)\n\n    // cookies are part of headers\n    const headerCount = headerEntries.length + (request.cookies ? 1 : 0)\n\n    const headers = []\n    let header = headerCount === 1 ? '' : '['\n\n    for (const [key, value] of headerEntries) {\n      switch (key) {\n        case 'Cookie':\n          break\n        case 'Accept': {\n          const accepts = value.split(',')\n          if (accepts.length === 1) {\n            headers.push(`field.AcceptField(MediaType(${repr(value)}))`)\n          } else {\n            let acceptheader = 'field.AcceptField(['\n            for (const accept of accepts) {\n              acceptheader += `\\n        MediaType(${repr(accept.trim())})`\n            }\n            acceptheader += '\\n    ])'\n            headers.push(acceptheader)\n          }\n          break\n        }\n        default:\n          headers.push(`HeaderField(${repr(key)}, ${repr(value)})`)\n      }\n    }\n\n    if (headerCount === 1) {\n      header += headers.pop()\n    } else {\n      header += '\\n    ' + headers.join('\\n    ')\n      if (request.cookies) {\n        const cookieFieldParams = callFunction(null, 'cellfun', [\n          '@(x) Cookie(x{:})', callFunction(null, 'num2cell', ['cookies', '2'], '')\n        ], '')\n        header += '\\n    ' + callFunction(null, 'field.CookieField', cookieFieldParams, '')\n      }\n      header += '\\n]\\''\n    }\n    response = setVariableValue('header', header)\n  }\n\n  return response\n}\n\nconst prepareURI = (request) => {\n  const uriParams = [repr(request.urlWithoutQuery)]\n  if (request.query) {\n    uriParams.push('QueryParameter(params\\')')\n  }\n  return callFunction('uri', 'URI', uriParams)\n}\n\nconst prepareAuth = (request) => {\n  let options = []\n  let optionsParams = []\n  if (request.auth) {\n    const [usr, pass] = request.auth.split(':')\n    const userfield = `'Username', ${repr(usr)}`\n    const passfield = `'Password', ${repr(pass)}`\n    const authparams = (usr ? `${userfield}, ` : '') + passfield\n    optionsParams.push(repr('Credentials'), 'cred')\n    options.push(callFunction('cred', 'Credentials', authparams))\n  }\n\n  if (request.insecure) {\n    optionsParams.push(repr('VerifyServerName'), 'false')\n  }\n\n  if (optionsParams.length > 0) {\n    options.push(callFunction('options', 'HTTPOptions', optionsParams))\n  }\n\n  return options\n}\n\nconst prepareMultipartUploads = (request) => {\n  let response = null\n  if (request.multipartUploads) {\n    const params = []\n    for (const [key, value] of Object.entries(request.multipartUploads)) {\n      const pair = []\n      pair.push(repr(key))\n      const fileProvider = prepareDataProvider(value, null, '', 1)\n      pair.push(fileProvider)\n      params.push(pair)\n    }\n    response = callFunction('body', 'MultipartFormProvider', params)\n  }\n\n  return response\n}\n\nconst isJsonString = (str) => {\n  // Source: https://stackoverflow.com/a/3710226/5625738\n  try {\n    JSON.parse(str)\n  } catch (e) {\n    return false\n  }\n  return true\n}\n\nconst prepareDataProvider = (value, output, termination, indentLevel, isDataBinary) => {\n  if (typeof indentLevel === 'undefined' || indentLevel === null) indentLevel = 0\n  if (typeof isDataBinary === 'undefined') isDataBinary = true\n  if (value[0] === '@') {\n    const filename = value.slice(1)\n    // >> imformats % for seeing MATLAB supported image formats\n    const isImageProvider = new Set(['jpeg', 'jpg', 'png', 'tif', 'gif']).has(filename.split('.')[1])\n    const provider = isImageProvider ? 'ImageProvider' : 'FileProvider'\n    if (!isDataBinary) {\n      return [\n        callFunction(output, 'fileread', repr(filename)),\n        setVariableValue(`${output}(${output}==13 | ${output}==10)`, '[]')\n      ]\n    }\n    return callFunction(output, provider, repr(filename), termination)\n  }\n\n  if (value === true) {\n    return callFunction(output, 'FileProvider', '', termination)\n  }\n\n  if (typeof value !== 'number' && isJsonString(value)) {\n    const obj = JSON.parse(value)\n    // If fail to create a struct for the JSON, then return a string\n    try {\n      const structure = structify(obj, indentLevel)\n      return callFunction(output, 'JSONProvider', structure, termination)\n    } catch (e) {\n      return callFunction(output, 'StringProvider', repr(value), termination)\n    }\n  }\n\n  if (typeof value === 'number') {\n    return callFunction(output, 'FormProvider', repr(value), termination)\n  }\n  const formValue = value.split('&').map(x => x.split('=').map(x => repr(x)))\n  return callFunction(output, 'FormProvider', formValue, termination)\n}\n\nconst prepareData = (request) => {\n  let response = null\n  if (request.dataArray) {\n    const data = request.dataArray.map(x => x.split('=').map(x => {\n      let ans = repr(x)\n      try {\n        const jsonData = JSON.parse(x)\n        if (typeof jsonData === 'object') {\n          ans = callFunction(null, 'JSONProvider', structify(jsonData, 1), '')\n        }\n      } catch (e) {}\n\n      return ans\n    }))\n\n    response = callFunction('body', 'FormProvider', data)\n  } else if (request.data) {\n    response = prepareDataProvider(request.data, 'body', ';', 0, !!request.isDataBinary)\n    if (!response) {\n      response = setVariableValue('body', repr(request.data))\n    }\n  }\n  return response\n}\n\nconst prepareRequestMessage = (request) => {\n  let reqMessage = [repr(request.method)]\n  if (request.cookie || request.headers) {\n    reqMessage.push('header')\n  } else if (request.method === 'get') {\n    reqMessage = ''\n  }\n  if (containsBody(request)) {\n    if (reqMessage.length === 1) {\n      reqMessage.push('[]')\n    }\n    reqMessage.push('body')\n  }\n\n  // list as many params as necessary\n  const params = ['uri.EncodedURI']\n  if (request.auth || request.insecure) {\n    params.push('options')\n  }\n\n  const response = [callFunction('response', 'RequestMessage', reqMessage,\n    callFunction(null, '.send', params)\n  )]\n\n  return response.join('\\n')\n}\n\nconst toHTTPInterface = (request) => {\n  return [\n    '%% HTTP Interface',\n    'import matlab.net.*',\n    'import matlab.net.http.*',\n    (containsBody(request) ? 'import matlab.net.http.io.*' : null),\n    '',\n    prepareQueryString(request),\n    prepareCookies(request),\n    prepareHeaders(request),\n    prepareURI(request),\n    prepareAuth(request),\n    prepareMultipartUploads(request),\n    prepareData(request),\n    prepareRequestMessage(request),\n    ''\n  ]\n}\n\nmodule.exports = toHTTPInterface\n"]},"metadata":{},"sourceType":"script"}