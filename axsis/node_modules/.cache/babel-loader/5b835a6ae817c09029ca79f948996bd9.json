{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\n\nconst path = require('path');\n\nconst assert = require('assert');\n\nconst isWindows = process.platform === 'win32';\n\nfunction defaults(options) {\n  const methods = ['unlink', 'chmod', 'stat', 'lstat', 'rmdir', 'readdir'];\n  methods.forEach(m => {\n    options[m] = options[m] || fs[m];\n    m = m + 'Sync';\n    options[m] = options[m] || fs[m];\n  });\n  options.maxBusyTries = options.maxBusyTries || 3;\n}\n\nfunction rimraf(p, options, cb) {\n  let busyTries = 0;\n\n  if (typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  assert(p, 'rimraf: missing path');\n  assert.strictEqual(typeof p, 'string', 'rimraf: path should be a string');\n  assert.strictEqual(typeof cb, 'function', 'rimraf: callback function required');\n  assert(options, 'rimraf: invalid options argument provided');\n  assert.strictEqual(typeof options, 'object', 'rimraf: options should be object');\n  defaults(options);\n  rimraf_(p, options, function CB(er) {\n    if (er) {\n      if ((er.code === 'EBUSY' || er.code === 'ENOTEMPTY' || er.code === 'EPERM') && busyTries < options.maxBusyTries) {\n        busyTries++;\n        const time = busyTries * 100; // try again, with the same exact callback as this one.\n\n        return setTimeout(() => rimraf_(p, options, CB), time);\n      } // already gone\n\n\n      if (er.code === 'ENOENT') er = null;\n    }\n\n    cb(er);\n  });\n} // Two possible strategies.\n// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR\n// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR\n//\n// Both result in an extra syscall when you guess wrong.  However, there\n// are likely far more normal files in the world than directories.  This\n// is based on the assumption that a the average number of files per\n// directory is >= 1.\n//\n// If anyone ever complains about this, then I guess the strategy could\n// be made configurable somehow.  But until then, YAGNI.\n\n\nfunction rimraf_(p, options, cb) {\n  assert(p);\n  assert(options);\n  assert(typeof cb === 'function'); // sunos lets the root user unlink directories, which is... weird.\n  // so we have to lstat here and make sure it's not a dir.\n\n  options.lstat(p, (er, st) => {\n    if (er && er.code === 'ENOENT') {\n      return cb(null);\n    } // Windows can EPERM on stat.  Life is suffering.\n\n\n    if (er && er.code === 'EPERM' && isWindows) {\n      return fixWinEPERM(p, options, er, cb);\n    }\n\n    if (st && st.isDirectory()) {\n      return rmdir(p, options, er, cb);\n    }\n\n    options.unlink(p, er => {\n      if (er) {\n        if (er.code === 'ENOENT') {\n          return cb(null);\n        }\n\n        if (er.code === 'EPERM') {\n          return isWindows ? fixWinEPERM(p, options, er, cb) : rmdir(p, options, er, cb);\n        }\n\n        if (er.code === 'EISDIR') {\n          return rmdir(p, options, er, cb);\n        }\n      }\n\n      return cb(er);\n    });\n  });\n}\n\nfunction fixWinEPERM(p, options, er, cb) {\n  assert(p);\n  assert(options);\n  assert(typeof cb === 'function');\n\n  if (er) {\n    assert(er instanceof Error);\n  }\n\n  options.chmod(p, 0o666, er2 => {\n    if (er2) {\n      cb(er2.code === 'ENOENT' ? null : er);\n    } else {\n      options.stat(p, (er3, stats) => {\n        if (er3) {\n          cb(er3.code === 'ENOENT' ? null : er);\n        } else if (stats.isDirectory()) {\n          rmdir(p, options, er, cb);\n        } else {\n          options.unlink(p, cb);\n        }\n      });\n    }\n  });\n}\n\nfunction fixWinEPERMSync(p, options, er) {\n  let stats;\n  assert(p);\n  assert(options);\n\n  if (er) {\n    assert(er instanceof Error);\n  }\n\n  try {\n    options.chmodSync(p, 0o666);\n  } catch (er2) {\n    if (er2.code === 'ENOENT') {\n      return;\n    } else {\n      throw er;\n    }\n  }\n\n  try {\n    stats = options.statSync(p);\n  } catch (er3) {\n    if (er3.code === 'ENOENT') {\n      return;\n    } else {\n      throw er;\n    }\n  }\n\n  if (stats.isDirectory()) {\n    rmdirSync(p, options, er);\n  } else {\n    options.unlinkSync(p);\n  }\n}\n\nfunction rmdir(p, options, originalEr, cb) {\n  assert(p);\n  assert(options);\n\n  if (originalEr) {\n    assert(originalEr instanceof Error);\n  }\n\n  assert(typeof cb === 'function'); // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)\n  // if we guessed wrong, and it's not a directory, then\n  // raise the original error.\n\n  options.rmdir(p, er => {\n    if (er && (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM')) {\n      rmkids(p, options, cb);\n    } else if (er && er.code === 'ENOTDIR') {\n      cb(originalEr);\n    } else {\n      cb(er);\n    }\n  });\n}\n\nfunction rmkids(p, options, cb) {\n  assert(p);\n  assert(options);\n  assert(typeof cb === 'function');\n  options.readdir(p, (er, files) => {\n    if (er) return cb(er);\n    let n = files.length;\n    let errState;\n    if (n === 0) return options.rmdir(p, cb);\n    files.forEach(f => {\n      rimraf(path.join(p, f), options, er => {\n        if (errState) {\n          return;\n        }\n\n        if (er) return cb(errState = er);\n\n        if (--n === 0) {\n          options.rmdir(p, cb);\n        }\n      });\n    });\n  });\n} // this looks simpler, and is strictly *faster*, but will\n// tie up the JavaScript thread and fail on excessively\n// deep directory trees.\n\n\nfunction rimrafSync(p, options) {\n  let st;\n  options = options || {};\n  defaults(options);\n  assert(p, 'rimraf: missing path');\n  assert.strictEqual(typeof p, 'string', 'rimraf: path should be a string');\n  assert(options, 'rimraf: missing options');\n  assert.strictEqual(typeof options, 'object', 'rimraf: options should be object');\n\n  try {\n    st = options.lstatSync(p);\n  } catch (er) {\n    if (er.code === 'ENOENT') {\n      return;\n    } // Windows can EPERM on stat.  Life is suffering.\n\n\n    if (er.code === 'EPERM' && isWindows) {\n      fixWinEPERMSync(p, options, er);\n    }\n  }\n\n  try {\n    // sunos lets the root user unlink directories, which is... weird.\n    if (st && st.isDirectory()) {\n      rmdirSync(p, options, null);\n    } else {\n      options.unlinkSync(p);\n    }\n  } catch (er) {\n    if (er.code === 'ENOENT') {\n      return;\n    } else if (er.code === 'EPERM') {\n      return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);\n    } else if (er.code !== 'EISDIR') {\n      throw er;\n    }\n\n    rmdirSync(p, options, er);\n  }\n}\n\nfunction rmdirSync(p, options, originalEr) {\n  assert(p);\n  assert(options);\n\n  if (originalEr) {\n    assert(originalEr instanceof Error);\n  }\n\n  try {\n    options.rmdirSync(p);\n  } catch (er) {\n    if (er.code === 'ENOTDIR') {\n      throw originalEr;\n    } else if (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM') {\n      rmkidsSync(p, options);\n    } else if (er.code !== 'ENOENT') {\n      throw er;\n    }\n  }\n}\n\nfunction rmkidsSync(p, options) {\n  assert(p);\n  assert(options);\n  options.readdirSync(p).forEach(f => rimrafSync(path.join(p, f), options));\n\n  if (isWindows) {\n    // We only end up here once we got ENOTEMPTY at least once, and\n    // at this point, we are guaranteed to have removed all the kids.\n    // So, we know that it won't be ENOENT or ENOTDIR or anything else.\n    // try really hard to delete stuff on windows, because it has a\n    // PROFOUNDLY annoying habit of not closing handles promptly when\n    // files are deleted, resulting in spurious ENOTEMPTY errors.\n    const startTime = Date.now();\n\n    do {\n      try {\n        const ret = options.rmdirSync(p, options);\n        return ret;\n      } catch (er) {}\n    } while (Date.now() - startTime < 500); // give up after 500ms\n\n  } else {\n    const ret = options.rmdirSync(p, options);\n    return ret;\n  }\n}\n\nmodule.exports = rimraf;\nrimraf.sync = rimrafSync;","map":{"version":3,"sources":["/home/marcel/Desktop/CobaProject/GUI backless-js/axsis/node_modules/fs-extra/lib/remove/rimraf.js"],"names":["fs","require","path","assert","isWindows","process","platform","defaults","options","methods","forEach","m","maxBusyTries","rimraf","p","cb","busyTries","strictEqual","rimraf_","CB","er","code","time","setTimeout","lstat","st","fixWinEPERM","isDirectory","rmdir","unlink","Error","chmod","er2","stat","er3","stats","fixWinEPERMSync","chmodSync","statSync","rmdirSync","unlinkSync","originalEr","rmkids","readdir","files","n","length","errState","f","join","rimrafSync","lstatSync","rmkidsSync","readdirSync","startTime","Date","now","ret","module","exports","sync"],"mappings":"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","sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst assert = require('assert')\n\nconst isWindows = (process.platform === 'win32')\n\nfunction defaults (options) {\n  const methods = [\n    'unlink',\n    'chmod',\n    'stat',\n    'lstat',\n    'rmdir',\n    'readdir'\n  ]\n  methods.forEach(m => {\n    options[m] = options[m] || fs[m]\n    m = m + 'Sync'\n    options[m] = options[m] || fs[m]\n  })\n\n  options.maxBusyTries = options.maxBusyTries || 3\n}\n\nfunction rimraf (p, options, cb) {\n  let busyTries = 0\n\n  if (typeof options === 'function') {\n    cb = options\n    options = {}\n  }\n\n  assert(p, 'rimraf: missing path')\n  assert.strictEqual(typeof p, 'string', 'rimraf: path should be a string')\n  assert.strictEqual(typeof cb, 'function', 'rimraf: callback function required')\n  assert(options, 'rimraf: invalid options argument provided')\n  assert.strictEqual(typeof options, 'object', 'rimraf: options should be object')\n\n  defaults(options)\n\n  rimraf_(p, options, function CB (er) {\n    if (er) {\n      if ((er.code === 'EBUSY' || er.code === 'ENOTEMPTY' || er.code === 'EPERM') &&\n          busyTries < options.maxBusyTries) {\n        busyTries++\n        const time = busyTries * 100\n        // try again, with the same exact callback as this one.\n        return setTimeout(() => rimraf_(p, options, CB), time)\n      }\n\n      // already gone\n      if (er.code === 'ENOENT') er = null\n    }\n\n    cb(er)\n  })\n}\n\n// Two possible strategies.\n// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR\n// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR\n//\n// Both result in an extra syscall when you guess wrong.  However, there\n// are likely far more normal files in the world than directories.  This\n// is based on the assumption that a the average number of files per\n// directory is >= 1.\n//\n// If anyone ever complains about this, then I guess the strategy could\n// be made configurable somehow.  But until then, YAGNI.\nfunction rimraf_ (p, options, cb) {\n  assert(p)\n  assert(options)\n  assert(typeof cb === 'function')\n\n  // sunos lets the root user unlink directories, which is... weird.\n  // so we have to lstat here and make sure it's not a dir.\n  options.lstat(p, (er, st) => {\n    if (er && er.code === 'ENOENT') {\n      return cb(null)\n    }\n\n    // Windows can EPERM on stat.  Life is suffering.\n    if (er && er.code === 'EPERM' && isWindows) {\n      return fixWinEPERM(p, options, er, cb)\n    }\n\n    if (st && st.isDirectory()) {\n      return rmdir(p, options, er, cb)\n    }\n\n    options.unlink(p, er => {\n      if (er) {\n        if (er.code === 'ENOENT') {\n          return cb(null)\n        }\n        if (er.code === 'EPERM') {\n          return (isWindows)\n            ? fixWinEPERM(p, options, er, cb)\n            : rmdir(p, options, er, cb)\n        }\n        if (er.code === 'EISDIR') {\n          return rmdir(p, options, er, cb)\n        }\n      }\n      return cb(er)\n    })\n  })\n}\n\nfunction fixWinEPERM (p, options, er, cb) {\n  assert(p)\n  assert(options)\n  assert(typeof cb === 'function')\n  if (er) {\n    assert(er instanceof Error)\n  }\n\n  options.chmod(p, 0o666, er2 => {\n    if (er2) {\n      cb(er2.code === 'ENOENT' ? null : er)\n    } else {\n      options.stat(p, (er3, stats) => {\n        if (er3) {\n          cb(er3.code === 'ENOENT' ? null : er)\n        } else if (stats.isDirectory()) {\n          rmdir(p, options, er, cb)\n        } else {\n          options.unlink(p, cb)\n        }\n      })\n    }\n  })\n}\n\nfunction fixWinEPERMSync (p, options, er) {\n  let stats\n\n  assert(p)\n  assert(options)\n  if (er) {\n    assert(er instanceof Error)\n  }\n\n  try {\n    options.chmodSync(p, 0o666)\n  } catch (er2) {\n    if (er2.code === 'ENOENT') {\n      return\n    } else {\n      throw er\n    }\n  }\n\n  try {\n    stats = options.statSync(p)\n  } catch (er3) {\n    if (er3.code === 'ENOENT') {\n      return\n    } else {\n      throw er\n    }\n  }\n\n  if (stats.isDirectory()) {\n    rmdirSync(p, options, er)\n  } else {\n    options.unlinkSync(p)\n  }\n}\n\nfunction rmdir (p, options, originalEr, cb) {\n  assert(p)\n  assert(options)\n  if (originalEr) {\n    assert(originalEr instanceof Error)\n  }\n  assert(typeof cb === 'function')\n\n  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)\n  // if we guessed wrong, and it's not a directory, then\n  // raise the original error.\n  options.rmdir(p, er => {\n    if (er && (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM')) {\n      rmkids(p, options, cb)\n    } else if (er && er.code === 'ENOTDIR') {\n      cb(originalEr)\n    } else {\n      cb(er)\n    }\n  })\n}\n\nfunction rmkids (p, options, cb) {\n  assert(p)\n  assert(options)\n  assert(typeof cb === 'function')\n\n  options.readdir(p, (er, files) => {\n    if (er) return cb(er)\n\n    let n = files.length\n    let errState\n\n    if (n === 0) return options.rmdir(p, cb)\n\n    files.forEach(f => {\n      rimraf(path.join(p, f), options, er => {\n        if (errState) {\n          return\n        }\n        if (er) return cb(errState = er)\n        if (--n === 0) {\n          options.rmdir(p, cb)\n        }\n      })\n    })\n  })\n}\n\n// this looks simpler, and is strictly *faster*, but will\n// tie up the JavaScript thread and fail on excessively\n// deep directory trees.\nfunction rimrafSync (p, options) {\n  let st\n\n  options = options || {}\n  defaults(options)\n\n  assert(p, 'rimraf: missing path')\n  assert.strictEqual(typeof p, 'string', 'rimraf: path should be a string')\n  assert(options, 'rimraf: missing options')\n  assert.strictEqual(typeof options, 'object', 'rimraf: options should be object')\n\n  try {\n    st = options.lstatSync(p)\n  } catch (er) {\n    if (er.code === 'ENOENT') {\n      return\n    }\n\n    // Windows can EPERM on stat.  Life is suffering.\n    if (er.code === 'EPERM' && isWindows) {\n      fixWinEPERMSync(p, options, er)\n    }\n  }\n\n  try {\n    // sunos lets the root user unlink directories, which is... weird.\n    if (st && st.isDirectory()) {\n      rmdirSync(p, options, null)\n    } else {\n      options.unlinkSync(p)\n    }\n  } catch (er) {\n    if (er.code === 'ENOENT') {\n      return\n    } else if (er.code === 'EPERM') {\n      return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)\n    } else if (er.code !== 'EISDIR') {\n      throw er\n    }\n    rmdirSync(p, options, er)\n  }\n}\n\nfunction rmdirSync (p, options, originalEr) {\n  assert(p)\n  assert(options)\n  if (originalEr) {\n    assert(originalEr instanceof Error)\n  }\n\n  try {\n    options.rmdirSync(p)\n  } catch (er) {\n    if (er.code === 'ENOTDIR') {\n      throw originalEr\n    } else if (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM') {\n      rmkidsSync(p, options)\n    } else if (er.code !== 'ENOENT') {\n      throw er\n    }\n  }\n}\n\nfunction rmkidsSync (p, options) {\n  assert(p)\n  assert(options)\n  options.readdirSync(p).forEach(f => rimrafSync(path.join(p, f), options))\n\n  if (isWindows) {\n    // We only end up here once we got ENOTEMPTY at least once, and\n    // at this point, we are guaranteed to have removed all the kids.\n    // So, we know that it won't be ENOENT or ENOTDIR or anything else.\n    // try really hard to delete stuff on windows, because it has a\n    // PROFOUNDLY annoying habit of not closing handles promptly when\n    // files are deleted, resulting in spurious ENOTEMPTY errors.\n    const startTime = Date.now()\n    do {\n      try {\n        const ret = options.rmdirSync(p, options)\n        return ret\n      } catch (er) { }\n    } while (Date.now() - startTime < 500) // give up after 500ms\n  } else {\n    const ret = options.rmdirSync(p, options)\n    return ret\n  }\n}\n\nmodule.exports = rimraf\nrimraf.sync = rimrafSync\n"]},"metadata":{},"sourceType":"script"}