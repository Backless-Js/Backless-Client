{"ast":null,"code":"const util = require('../util');\n\nconst jsesc = require('jsesc');\n\nconst toGo = curlCommand => {\n  const request = util.parseCurlCommand(curlCommand);\n  let goCode = 'package main\\n\\n';\n  goCode += 'import (\\n\\t\"fmt\"\\n\\t\"io/ioutil\"\\n\\t\"log\"\\n\\t\"net/http\"\\n)\\n\\n';\n  goCode += 'func main() {\\n';\n  goCode += '\\tclient := &http.Client{}\\n';\n\n  if (request.data) {\n    if (typeof request.data === 'number') {\n      request.data = request.data.toString();\n    }\n\n    if (request.data.indexOf(\"'\") > -1) {\n      request.data = jsesc(request.data);\n    } // import strings\n\n\n    goCode = goCode.replace('\\n)', '\\n\\t\"strings\"\\n)');\n    goCode += '\\tvar data = strings.NewReader(`' + request.data + '`)\\n';\n    goCode += '\\treq, err := http.NewRequest(\"' + request.method.toUpperCase() + '\", \"' + request.url + '\", data)\\n';\n  } else {\n    goCode += '\\treq, err := http.NewRequest(\"' + request.method.toUpperCase() + '\", \"' + request.url + '\", nil)\\n';\n  }\n\n  goCode += '\\tif err != nil {\\n\\t\\tlog.Fatal(err)\\n\\t}\\n';\n\n  if (request.headers || request.cookies) {\n    for (const headerName in request.headers) {\n      goCode += '\\treq.Header.Set(\"' + headerName + '\", \"' + request.headers[headerName] + '\")\\n';\n    }\n\n    if (request.cookies) {\n      const cookieString = util.serializeCookies(request.cookies);\n      goCode += '\\treq.Header.Set(\"Cookie\", \"' + cookieString + '\")\\n';\n    }\n  }\n\n  if (request.auth) {\n    const splitAuth = request.auth.split(':');\n    const user = splitAuth[0] || '';\n    const password = splitAuth[1] || '';\n    goCode += '\\treq.SetBasicAuth(\"' + user + '\", \"' + password + '\")\\n';\n  }\n\n  goCode += '\\tresp, err := client.Do(req)\\n';\n  goCode += '\\tif err != nil {\\n';\n  goCode += '\\t\\tlog.Fatal(err)\\n';\n  goCode += '\\t}\\n';\n  goCode += '\\tbodyText, err := ioutil.ReadAll(resp.Body)\\n';\n  goCode += '\\tif err != nil {\\n';\n  goCode += '\\t\\tlog.Fatal(err)\\n';\n  goCode += '\\t}\\n';\n  goCode += '\\tfmt.Printf(\"%s\\\\n\", bodyText)\\n';\n  goCode += '}';\n  return goCode + '\\n';\n};\n\nmodule.exports = toGo;","map":{"version":3,"sources":["/home/marcel/Desktop/CobaProject/GUI backless-js/axsis/node_modules/curlconverter/generators/go.js"],"names":["util","require","jsesc","toGo","curlCommand","request","parseCurlCommand","goCode","data","toString","indexOf","replace","method","toUpperCase","url","headers","cookies","headerName","cookieString","serializeCookies","auth","splitAuth","split","user","password","module","exports"],"mappings":"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","sourcesContent":["const util = require('../util')\nconst jsesc = require('jsesc')\n\nconst toGo = curlCommand => {\n  const request = util.parseCurlCommand(curlCommand)\n  let goCode = 'package main\\n\\n'\n  goCode += 'import (\\n\\t\"fmt\"\\n\\t\"io/ioutil\"\\n\\t\"log\"\\n\\t\"net/http\"\\n)\\n\\n'\n  goCode += 'func main() {\\n'\n  goCode += '\\tclient := &http.Client{}\\n'\n  if (request.data) {\n    if (typeof request.data === 'number') {\n      request.data = request.data.toString()\n    }\n    if (request.data.indexOf(\"'\") > -1) {\n      request.data = jsesc(request.data)\n    }\n    // import strings\n    goCode = goCode.replace('\\n)', '\\n\\t\"strings\"\\n)')\n    goCode += '\\tvar data = strings.NewReader(`' + request.data + '`)\\n'\n    goCode += '\\treq, err := http.NewRequest(\"' + request.method.toUpperCase() + '\", \"' + request.url + '\", data)\\n'\n  } else {\n    goCode += '\\treq, err := http.NewRequest(\"' + request.method.toUpperCase() + '\", \"' + request.url + '\", nil)\\n'\n  }\n  goCode += '\\tif err != nil {\\n\\t\\tlog.Fatal(err)\\n\\t}\\n'\n  if (request.headers || request.cookies) {\n    for (const headerName in request.headers) {\n      goCode += '\\treq.Header.Set(\"' + headerName + '\", \"' + request.headers[headerName] + '\")\\n'\n    }\n    if (request.cookies) {\n      const cookieString = util.serializeCookies(request.cookies)\n      goCode += '\\treq.Header.Set(\"Cookie\", \"' + cookieString + '\")\\n'\n    }\n  }\n\n  if (request.auth) {\n    const splitAuth = request.auth.split(':')\n    const user = splitAuth[0] || ''\n    const password = splitAuth[1] || ''\n    goCode += '\\treq.SetBasicAuth(\"' + user + '\", \"' + password + '\")\\n'\n  }\n  goCode += '\\tresp, err := client.Do(req)\\n'\n  goCode += '\\tif err != nil {\\n'\n  goCode += '\\t\\tlog.Fatal(err)\\n'\n  goCode += '\\t}\\n'\n  goCode += '\\tbodyText, err := ioutil.ReadAll(resp.Body)\\n'\n  goCode += '\\tif err != nil {\\n'\n  goCode += '\\t\\tlog.Fatal(err)\\n'\n  goCode += '\\t}\\n'\n  goCode += '\\tfmt.Printf(\"%s\\\\n\", bodyText)\\n'\n  goCode += '}'\n\n  return goCode + '\\n'\n}\n\nmodule.exports = toGo\n"]},"metadata":{},"sourceType":"script"}