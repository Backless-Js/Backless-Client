{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\n\nconst path = require('path');\n\nconst invalidWin32Path = require('./win32').invalidWin32Path;\n\nconst o777 = parseInt('0777', 8);\n\nfunction mkdirs(p, opts, callback, made) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else if (!opts || typeof opts !== 'object') {\n    opts = {\n      mode: opts\n    };\n  }\n\n  if (process.platform === 'win32' && invalidWin32Path(p)) {\n    const errInval = new Error(p + ' contains invalid WIN32 path characters.');\n    errInval.code = 'EINVAL';\n    return callback(errInval);\n  }\n\n  let mode = opts.mode;\n  const xfs = opts.fs || fs;\n\n  if (mode === undefined) {\n    mode = o777 & ~process.umask();\n  }\n\n  if (!made) made = null;\n\n  callback = callback || function () {};\n\n  p = path.resolve(p);\n  xfs.mkdir(p, mode, er => {\n    if (!er) {\n      made = made || p;\n      return callback(null, made);\n    }\n\n    switch (er.code) {\n      case 'ENOENT':\n        if (path.dirname(p) === p) return callback(er);\n        mkdirs(path.dirname(p), opts, (er, made) => {\n          if (er) callback(er, made);else mkdirs(p, opts, callback, made);\n        });\n        break;\n      // In the case of any other error, just see if there's a dir\n      // there already.  If so, then hooray!  If not, then something\n      // is borked.\n\n      default:\n        xfs.stat(p, (er2, stat) => {\n          // if the stat fails, then that's super weird.\n          // let the original error be the failure reason.\n          if (er2 || !stat.isDirectory()) callback(er, made);else callback(null, made);\n        });\n        break;\n    }\n  });\n}\n\nmodule.exports = mkdirs;","map":{"version":3,"sources":["/home/marcel/Desktop/CobaProject/GUI backless-js/axsis/node_modules/fs-extra/lib/mkdirs/mkdirs.js"],"names":["fs","require","path","invalidWin32Path","o777","parseInt","mkdirs","p","opts","callback","made","mode","process","platform","errInval","Error","code","xfs","undefined","umask","resolve","mkdir","er","dirname","stat","er2","isDirectory","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,aAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,SAAD,CAAP,CAAmBE,gBAA5C;;AAEA,MAAMC,IAAI,GAAGC,QAAQ,CAAC,MAAD,EAAS,CAAT,CAArB;;AAEA,SAASC,MAAT,CAAiBC,CAAjB,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,IAApC,EAA0C;AACxC,MAAI,OAAOF,IAAP,KAAgB,UAApB,EAAgC;AAC9BC,IAAAA,QAAQ,GAAGD,IAAX;AACAA,IAAAA,IAAI,GAAG,EAAP;AACD,GAHD,MAGO,IAAI,CAACA,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC;AAC5CA,IAAAA,IAAI,GAAG;AAAEG,MAAAA,IAAI,EAAEH;AAAR,KAAP;AACD;;AAED,MAAII,OAAO,CAACC,QAAR,KAAqB,OAArB,IAAgCV,gBAAgB,CAACI,CAAD,CAApD,EAAyD;AACvD,UAAMO,QAAQ,GAAG,IAAIC,KAAJ,CAAUR,CAAC,GAAG,0CAAd,CAAjB;AACAO,IAAAA,QAAQ,CAACE,IAAT,GAAgB,QAAhB;AACA,WAAOP,QAAQ,CAACK,QAAD,CAAf;AACD;;AAED,MAAIH,IAAI,GAAGH,IAAI,CAACG,IAAhB;AACA,QAAMM,GAAG,GAAGT,IAAI,CAACR,EAAL,IAAWA,EAAvB;;AAEA,MAAIW,IAAI,KAAKO,SAAb,EAAwB;AACtBP,IAAAA,IAAI,GAAGP,IAAI,GAAI,CAACQ,OAAO,CAACO,KAAR,EAAhB;AACD;;AACD,MAAI,CAACT,IAAL,EAAWA,IAAI,GAAG,IAAP;;AAEXD,EAAAA,QAAQ,GAAGA,QAAQ,IAAI,YAAY,CAAE,CAArC;;AACAF,EAAAA,CAAC,GAAGL,IAAI,CAACkB,OAAL,CAAab,CAAb,CAAJ;AAEAU,EAAAA,GAAG,CAACI,KAAJ,CAAUd,CAAV,EAAaI,IAAb,EAAmBW,EAAE,IAAI;AACvB,QAAI,CAACA,EAAL,EAAS;AACPZ,MAAAA,IAAI,GAAGA,IAAI,IAAIH,CAAf;AACA,aAAOE,QAAQ,CAAC,IAAD,EAAOC,IAAP,CAAf;AACD;;AACD,YAAQY,EAAE,CAACN,IAAX;AACE,WAAK,QAAL;AACE,YAAId,IAAI,CAACqB,OAAL,CAAahB,CAAb,MAAoBA,CAAxB,EAA2B,OAAOE,QAAQ,CAACa,EAAD,CAAf;AAC3BhB,QAAAA,MAAM,CAACJ,IAAI,CAACqB,OAAL,CAAahB,CAAb,CAAD,EAAkBC,IAAlB,EAAwB,CAACc,EAAD,EAAKZ,IAAL,KAAc;AAC1C,cAAIY,EAAJ,EAAQb,QAAQ,CAACa,EAAD,EAAKZ,IAAL,CAAR,CAAR,KACKJ,MAAM,CAACC,CAAD,EAAIC,IAAJ,EAAUC,QAAV,EAAoBC,IAApB,CAAN;AACN,SAHK,CAAN;AAIA;AAEF;AACA;AACA;;AACA;AACEO,QAAAA,GAAG,CAACO,IAAJ,CAASjB,CAAT,EAAY,CAACkB,GAAD,EAAMD,IAAN,KAAe;AACzB;AACA;AACA,cAAIC,GAAG,IAAI,CAACD,IAAI,CAACE,WAAL,EAAZ,EAAgCjB,QAAQ,CAACa,EAAD,EAAKZ,IAAL,CAAR,CAAhC,KACKD,QAAQ,CAAC,IAAD,EAAOC,IAAP,CAAR;AACN,SALD;AAMA;AAnBJ;AAqBD,GA1BD;AA2BD;;AAEDiB,MAAM,CAACC,OAAP,GAAiBtB,MAAjB","sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst invalidWin32Path = require('./win32').invalidWin32Path\n\nconst o777 = parseInt('0777', 8)\n\nfunction mkdirs (p, opts, callback, made) {\n  if (typeof opts === 'function') {\n    callback = opts\n    opts = {}\n  } else if (!opts || typeof opts !== 'object') {\n    opts = { mode: opts }\n  }\n\n  if (process.platform === 'win32' && invalidWin32Path(p)) {\n    const errInval = new Error(p + ' contains invalid WIN32 path characters.')\n    errInval.code = 'EINVAL'\n    return callback(errInval)\n  }\n\n  let mode = opts.mode\n  const xfs = opts.fs || fs\n\n  if (mode === undefined) {\n    mode = o777 & (~process.umask())\n  }\n  if (!made) made = null\n\n  callback = callback || function () {}\n  p = path.resolve(p)\n\n  xfs.mkdir(p, mode, er => {\n    if (!er) {\n      made = made || p\n      return callback(null, made)\n    }\n    switch (er.code) {\n      case 'ENOENT':\n        if (path.dirname(p) === p) return callback(er)\n        mkdirs(path.dirname(p), opts, (er, made) => {\n          if (er) callback(er, made)\n          else mkdirs(p, opts, callback, made)\n        })\n        break\n\n      // In the case of any other error, just see if there's a dir\n      // there already.  If so, then hooray!  If not, then something\n      // is borked.\n      default:\n        xfs.stat(p, (er2, stat) => {\n          // if the stat fails, then that's super weird.\n          // let the original error be the failure reason.\n          if (er2 || !stat.isDirectory()) callback(er, made)\n          else callback(null, made)\n        })\n        break\n    }\n  })\n}\n\nmodule.exports = mkdirs\n"]},"metadata":{},"sourceType":"script"}