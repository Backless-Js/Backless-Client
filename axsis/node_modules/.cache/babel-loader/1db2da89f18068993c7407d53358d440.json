{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\n\nconst path = require('path');\n\nconst invalidWin32Path = require('./win32').invalidWin32Path;\n\nconst o777 = parseInt('0777', 8);\n\nfunction mkdirsSync(p, opts, made) {\n  if (!opts || typeof opts !== 'object') {\n    opts = {\n      mode: opts\n    };\n  }\n\n  let mode = opts.mode;\n  const xfs = opts.fs || fs;\n\n  if (process.platform === 'win32' && invalidWin32Path(p)) {\n    const errInval = new Error(p + ' contains invalid WIN32 path characters.');\n    errInval.code = 'EINVAL';\n    throw errInval;\n  }\n\n  if (mode === undefined) {\n    mode = o777 & ~process.umask();\n  }\n\n  if (!made) made = null;\n  p = path.resolve(p);\n\n  try {\n    xfs.mkdirSync(p, mode);\n    made = made || p;\n  } catch (err0) {\n    if (err0.code === 'ENOENT') {\n      if (path.dirname(p) === p) throw err0;\n      made = mkdirsSync(path.dirname(p), opts, made);\n      mkdirsSync(p, opts, made);\n    } else {\n      // In the case of any other error, just see if there's a dir there\n      // already. If so, then hooray!  If not, then something is borked.\n      let stat;\n\n      try {\n        stat = xfs.statSync(p);\n      } catch (err1) {\n        throw err0;\n      }\n\n      if (!stat.isDirectory()) throw err0;\n    }\n  }\n\n  return made;\n}\n\nmodule.exports = mkdirsSync;","map":{"version":3,"sources":["/home/marcel/Desktop/CobaProject/GUI backless-js/axsis/node_modules/fs-extra/lib/mkdirs/mkdirs-sync.js"],"names":["fs","require","path","invalidWin32Path","o777","parseInt","mkdirsSync","p","opts","made","mode","xfs","process","platform","errInval","Error","code","undefined","umask","resolve","mkdirSync","err0","dirname","stat","statSync","err1","isDirectory","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,aAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,SAAD,CAAP,CAAmBE,gBAA5C;;AAEA,MAAMC,IAAI,GAAGC,QAAQ,CAAC,MAAD,EAAS,CAAT,CAArB;;AAEA,SAASC,UAAT,CAAqBC,CAArB,EAAwBC,IAAxB,EAA8BC,IAA9B,EAAoC;AAClC,MAAI,CAACD,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC;AACrCA,IAAAA,IAAI,GAAG;AAAEE,MAAAA,IAAI,EAAEF;AAAR,KAAP;AACD;;AAED,MAAIE,IAAI,GAAGF,IAAI,CAACE,IAAhB;AACA,QAAMC,GAAG,GAAGH,IAAI,CAACR,EAAL,IAAWA,EAAvB;;AAEA,MAAIY,OAAO,CAACC,QAAR,KAAqB,OAArB,IAAgCV,gBAAgB,CAACI,CAAD,CAApD,EAAyD;AACvD,UAAMO,QAAQ,GAAG,IAAIC,KAAJ,CAAUR,CAAC,GAAG,0CAAd,CAAjB;AACAO,IAAAA,QAAQ,CAACE,IAAT,GAAgB,QAAhB;AACA,UAAMF,QAAN;AACD;;AAED,MAAIJ,IAAI,KAAKO,SAAb,EAAwB;AACtBP,IAAAA,IAAI,GAAGN,IAAI,GAAI,CAACQ,OAAO,CAACM,KAAR,EAAhB;AACD;;AACD,MAAI,CAACT,IAAL,EAAWA,IAAI,GAAG,IAAP;AAEXF,EAAAA,CAAC,GAAGL,IAAI,CAACiB,OAAL,CAAaZ,CAAb,CAAJ;;AAEA,MAAI;AACFI,IAAAA,GAAG,CAACS,SAAJ,CAAcb,CAAd,EAAiBG,IAAjB;AACAD,IAAAA,IAAI,GAAGA,IAAI,IAAIF,CAAf;AACD,GAHD,CAGE,OAAOc,IAAP,EAAa;AACb,QAAIA,IAAI,CAACL,IAAL,KAAc,QAAlB,EAA4B;AAC1B,UAAId,IAAI,CAACoB,OAAL,CAAaf,CAAb,MAAoBA,CAAxB,EAA2B,MAAMc,IAAN;AAC3BZ,MAAAA,IAAI,GAAGH,UAAU,CAACJ,IAAI,CAACoB,OAAL,CAAaf,CAAb,CAAD,EAAkBC,IAAlB,EAAwBC,IAAxB,CAAjB;AACAH,MAAAA,UAAU,CAACC,CAAD,EAAIC,IAAJ,EAAUC,IAAV,CAAV;AACD,KAJD,MAIO;AACL;AACA;AACA,UAAIc,IAAJ;;AACA,UAAI;AACFA,QAAAA,IAAI,GAAGZ,GAAG,CAACa,QAAJ,CAAajB,CAAb,CAAP;AACD,OAFD,CAEE,OAAOkB,IAAP,EAAa;AACb,cAAMJ,IAAN;AACD;;AACD,UAAI,CAACE,IAAI,CAACG,WAAL,EAAL,EAAyB,MAAML,IAAN;AAC1B;AACF;;AAED,SAAOZ,IAAP;AACD;;AAEDkB,MAAM,CAACC,OAAP,GAAiBtB,UAAjB","sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst invalidWin32Path = require('./win32').invalidWin32Path\n\nconst o777 = parseInt('0777', 8)\n\nfunction mkdirsSync (p, opts, made) {\n  if (!opts || typeof opts !== 'object') {\n    opts = { mode: opts }\n  }\n\n  let mode = opts.mode\n  const xfs = opts.fs || fs\n\n  if (process.platform === 'win32' && invalidWin32Path(p)) {\n    const errInval = new Error(p + ' contains invalid WIN32 path characters.')\n    errInval.code = 'EINVAL'\n    throw errInval\n  }\n\n  if (mode === undefined) {\n    mode = o777 & (~process.umask())\n  }\n  if (!made) made = null\n\n  p = path.resolve(p)\n\n  try {\n    xfs.mkdirSync(p, mode)\n    made = made || p\n  } catch (err0) {\n    if (err0.code === 'ENOENT') {\n      if (path.dirname(p) === p) throw err0\n      made = mkdirsSync(path.dirname(p), opts, made)\n      mkdirsSync(p, opts, made)\n    } else {\n      // In the case of any other error, just see if there's a dir there\n      // already. If so, then hooray!  If not, then something is borked.\n      let stat\n      try {\n        stat = xfs.statSync(p)\n      } catch (err1) {\n        throw err0\n      }\n      if (!stat.isDirectory()) throw err0\n    }\n  }\n\n  return made\n}\n\nmodule.exports = mkdirsSync\n"]},"metadata":{},"sourceType":"script"}