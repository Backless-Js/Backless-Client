{"ast":null,"code":"const util = require('../util');\n\nconst jsesc = require('jsesc');\n\nconst INDENTATION = ' '.repeat(4);\n\nconst indent = (line, level = 1) => INDENTATION.repeat(level) + line;\n\nconst quote = str => jsesc(str, {\n  quotes: 'double'\n});\n\nfunction toRust(curlCommand) {\n  const lines = ['extern crate reqwest;'];\n  const request = util.parseCurlCommand(curlCommand);\n  const hasHeaders = request.headers || request.cookies;\n  {\n    // Generate imports.\n    const imports = [{\n      want: 'header',\n      condition: hasHeaders\n    }, {\n      want: 'multipart',\n      condition: !!request.multipartUploads\n    }].filter(i => i.condition).map(i => i.want);\n\n    if (imports.length > 1) {\n      lines.push(`use reqwest::{${imports.join(', ')}};`);\n    } else if (imports.length) {\n      lines.push(`use reqwest::${imports[0]};`);\n    }\n  }\n  lines.push('', 'fn main() -> Result<(), Box<dyn std::error::Error>> {');\n\n  if (request.headers || request.cookies) {\n    lines.push(indent('let mut headers = header::HeaderMap::new();'));\n\n    for (const headerName in request.headers) {\n      const headerValue = quote(request.headers[headerName]);\n      lines.push(indent(`headers.insert(\"${headerName}\", \"${headerValue}\".parse().unwrap());`));\n    }\n\n    if (request.cookies) {\n      const cookies = Object.keys(request.cookies).map(key => `${key}=${request.cookies[key]}`).join('; ');\n      lines.push(indent(`headers.insert(header::COOKIE, \"${quote(cookies)}\".parse().unwrap());`));\n    }\n\n    lines.push('');\n  }\n\n  if (request.multipartUploads) {\n    lines.push(indent('let form = multipart::Form::new()'));\n    const parts = Object.keys(request.multipartUploads).map(partType => {\n      const partValue = request.multipartUploads[partType];\n\n      switch (partType) {\n        case 'image':\n        case 'file':\n          {\n            const path = partValue.split('@')[1];\n            return indent(`.file(\"${partType}\", \"${quote(path)}\")?`, 2);\n          }\n\n        default:\n          return indent(`.text(\"${partType}\", \"${quote(partValue)}\")`, 2);\n      }\n    });\n    parts[parts.length - 1] += ';';\n    lines.push(...parts, '');\n  }\n\n  lines.push(indent('let res = reqwest::Client::new()'));\n  lines.push(indent(`.${request.method}(\"${quote(request.url)}\")`, 2));\n\n  if (request.auth) {\n    const [user, password] = request.auth.split(':', 2).map(quote);\n    lines.push(indent(`.basic_auth(\"${user || ''}\", Some(\"${password || ''}\"))`, 2));\n  }\n\n  if (hasHeaders) {\n    lines.push(indent('.headers(headers)', 2));\n  }\n\n  if (request.multipartUploads) {\n    lines.push(indent('.multipart(form)', 2));\n  }\n\n  if (request.data) {\n    if (typeof request.data === 'string' && request.data.indexOf('\\n') !== -1) {\n      // Use raw strings for multiline content\n      lines.push(indent('.body(r#\"', 2), request.data, '\"#', indent(')', 2));\n    } else {\n      lines.push(indent(`.body(\"${quote(request.data)}\")`, 2));\n    }\n  }\n\n  lines.push(indent('.send()?', 2), indent('.text()?;', 2), indent('println!(\"{}\", res);'), '', indent('Ok(())'), '}');\n  return lines.join('\\n') + '\\n';\n}\n\nmodule.exports = toRust;","map":{"version":3,"sources":["/home/marcel/Desktop/CobaProject/GUI backless-js/axsis/node_modules/curlconverter/generators/rust.js"],"names":["util","require","jsesc","INDENTATION","repeat","indent","line","level","quote","str","quotes","toRust","curlCommand","lines","request","parseCurlCommand","hasHeaders","headers","cookies","imports","want","condition","multipartUploads","filter","i","map","length","push","join","headerName","headerValue","Object","keys","key","parts","partType","partValue","path","split","method","url","auth","user","password","data","indexOf","module","exports"],"mappings":"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","sourcesContent":["const util = require('../util')\nconst jsesc = require('jsesc')\n\nconst INDENTATION = ' '.repeat(4)\nconst indent = (line, level = 1) => INDENTATION.repeat(level) + line\nconst quote = str => jsesc(str, { quotes: 'double' })\n\nfunction toRust (curlCommand) {\n  const lines = ['extern crate reqwest;']\n  const request = util.parseCurlCommand(curlCommand)\n\n  const hasHeaders = request.headers || request.cookies\n  {\n    // Generate imports.\n    const imports = [\n      { want: 'header', condition: hasHeaders },\n      { want: 'multipart', condition: !!request.multipartUploads }\n    ].filter(i => i.condition).map(i => i.want)\n\n    if (imports.length > 1) {\n      lines.push(`use reqwest::{${imports.join(', ')}};`)\n    } else if (imports.length) {\n      lines.push(`use reqwest::${imports[0]};`)\n    }\n  }\n  lines.push('', 'fn main() -> Result<(), Box<dyn std::error::Error>> {')\n\n  if (request.headers || request.cookies) {\n    lines.push(indent('let mut headers = header::HeaderMap::new();'))\n    for (const headerName in request.headers) {\n      const headerValue = quote(request.headers[headerName])\n      lines.push(indent(`headers.insert(\"${headerName}\", \"${headerValue}\".parse().unwrap());`))\n    }\n\n    if (request.cookies) {\n      const cookies = Object.keys(request.cookies)\n        .map(key => `${key}=${request.cookies[key]}`)\n        .join('; ')\n      lines.push(indent(`headers.insert(header::COOKIE, \"${quote(cookies)}\".parse().unwrap());`))\n    }\n\n    lines.push('')\n  }\n\n  if (request.multipartUploads) {\n    lines.push(indent('let form = multipart::Form::new()'))\n    const parts = Object.keys(request.multipartUploads).map(partType => {\n      const partValue = request.multipartUploads[partType]\n      switch (partType) {\n        case 'image':\n        case 'file': {\n          const path = partValue.split('@')[1]\n          return indent(`.file(\"${partType}\", \"${quote(path)}\")?`, 2)\n        }\n        default:\n          return indent(`.text(\"${partType}\", \"${quote(partValue)}\")`, 2)\n      }\n    })\n    parts[parts.length - 1] += ';'\n    lines.push(...parts, '')\n  }\n\n  lines.push(indent('let res = reqwest::Client::new()'))\n  lines.push(indent(`.${request.method}(\"${quote(request.url)}\")`, 2))\n\n  if (request.auth) {\n    const [user, password] = request.auth.split(':', 2).map(quote)\n    lines.push(indent(`.basic_auth(\"${user || ''}\", Some(\"${password || ''}\"))`, 2))\n  }\n\n  if (hasHeaders) {\n    lines.push(indent('.headers(headers)', 2))\n  }\n\n  if (request.multipartUploads) {\n    lines.push(indent('.multipart(form)', 2))\n  }\n\n  if (request.data) {\n    if (typeof request.data === 'string' && request.data.indexOf('\\n') !== -1) {\n      // Use raw strings for multiline content\n      lines.push(\n        indent('.body(r#\"', 2),\n        request.data,\n        '\"#',\n        indent(')', 2)\n      )\n    } else {\n      lines.push(indent(`.body(\"${quote(request.data)}\")`, 2))\n    }\n  }\n\n  lines.push(\n    indent('.send()?', 2),\n    indent('.text()?;', 2),\n    indent('println!(\"{}\", res);'),\n    '',\n    indent('Ok(())'),\n    '}'\n  )\n\n  return lines.join('\\n') + '\\n'\n}\n\nmodule.exports = toRust\n"]},"metadata":{},"sourceType":"script"}