{"ast":null,"code":"const util = require('../util');\n\nconst querystring = require('querystring');\n\nconst jsesc = require('jsesc');\n\nconst quote = str => jsesc(str, {\n  quotes: 'single'\n});\n\nconst toPhp = curlCommand => {\n  const request = util.parseCurlCommand(curlCommand);\n  let headerString = false;\n\n  if (request.headers) {\n    headerString = '$headers = array(\\n';\n    let i = 0;\n    const headerCount = Object.keys(request.headers).length;\n\n    for (const headerName in request.headers) {\n      headerString += \"    '\" + headerName + \"' => '\" + quote(request.headers[headerName]) + \"'\";\n\n      if (i < headerCount - 1) {\n        headerString += ',\\n';\n      }\n\n      i++;\n    }\n\n    if (request.cookies) {\n      const cookieString = quote(util.serializeCookies(request.cookies));\n      headerString += \",\\n    'Cookie' => '\" + cookieString + \"'\";\n    }\n\n    headerString += '\\n);';\n  } else {\n    headerString = '$headers = array();';\n  }\n\n  let optionsString = false;\n\n  if (request.auth) {\n    const splitAuth = request.auth.split(':').map(quote);\n    const user = splitAuth[0] || '';\n    const password = splitAuth[1] || '';\n    optionsString = \"$options = array('auth' => array('\" + user + \"', '\" + password + \"'));\";\n  }\n\n  let dataString = false;\n\n  if (request.data) {\n    if (typeof request.data === 'number') {\n      request.data = request.data.toString();\n    }\n\n    const parsedQueryString = querystring.parse(request.data);\n    dataString = '$data = array(\\n';\n    const dataCount = Object.keys(parsedQueryString).length;\n\n    if (dataCount === 1 && !parsedQueryString[Object.keys(parsedQueryString)[0]]) {\n      dataString = \"$data = '\" + quote(request.data) + \"';\";\n    } else {\n      let dataIndex = 0;\n\n      for (const key in parsedQueryString) {\n        const value = parsedQueryString[key];\n        dataString += \"    '\" + key + \"' => '\" + quote(value) + \"'\";\n\n        if (dataIndex < dataCount - 1) {\n          dataString += ',\\n';\n        }\n\n        dataIndex++;\n      }\n\n      dataString += '\\n);';\n    }\n  }\n\n  let requestLine = '$response = Requests::' + request.method + '(\\'' + request.url + '\\'';\n  requestLine += ', $headers';\n\n  if (dataString) {\n    requestLine += ', $data';\n  }\n\n  if (optionsString) {\n    requestLine += ', $options';\n  }\n\n  requestLine += ');';\n  let phpCode = '<?php\\n';\n  phpCode += 'include(\\'vendor/rmccue/requests/library/Requests.php\\');\\n';\n  phpCode += 'Requests::register_autoloader();\\n';\n  phpCode += headerString + '\\n';\n\n  if (dataString) {\n    phpCode += dataString + '\\n';\n  }\n\n  if (optionsString) {\n    phpCode += optionsString + '\\n';\n  }\n\n  phpCode += requestLine;\n  return phpCode + '\\n';\n};\n\nmodule.exports = toPhp;","map":{"version":3,"sources":["/home/marcel/Desktop/CobaProject/GUI backless-js/axsis/node_modules/curlconverter/generators/php.js"],"names":["util","require","querystring","jsesc","quote","str","quotes","toPhp","curlCommand","request","parseCurlCommand","headerString","headers","i","headerCount","Object","keys","length","headerName","cookies","cookieString","serializeCookies","optionsString","auth","splitAuth","split","map","user","password","dataString","data","toString","parsedQueryString","parse","dataCount","dataIndex","key","value","requestLine","method","url","phpCode","module","exports"],"mappings":"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","sourcesContent":["const util = require('../util')\nconst querystring = require('querystring')\nconst jsesc = require('jsesc')\nconst quote = str => jsesc(str, { quotes: 'single' })\n\nconst toPhp = curlCommand => {\n  const request = util.parseCurlCommand(curlCommand)\n\n  let headerString = false\n  if (request.headers) {\n    headerString = '$headers = array(\\n'\n    let i = 0\n    const headerCount = Object.keys(request.headers).length\n    for (const headerName in request.headers) {\n      headerString += \"    '\" + headerName + \"' => '\" + quote(request.headers[headerName]) + \"'\"\n      if (i < headerCount - 1) {\n        headerString += ',\\n'\n      }\n      i++\n    }\n    if (request.cookies) {\n      const cookieString = quote(util.serializeCookies(request.cookies))\n      headerString += \",\\n    'Cookie' => '\" + cookieString + \"'\"\n    }\n    headerString += '\\n);'\n  } else {\n    headerString = '$headers = array();'\n  }\n\n  let optionsString = false\n  if (request.auth) {\n    const splitAuth = request.auth.split(':').map(quote)\n    const user = splitAuth[0] || ''\n    const password = splitAuth[1] || ''\n    optionsString = \"$options = array('auth' => array('\" + user + \"', '\" + password + \"'));\"\n  }\n\n  let dataString = false\n  if (request.data) {\n    if (typeof request.data === 'number') {\n      request.data = request.data.toString()\n    }\n    const parsedQueryString = querystring.parse(request.data)\n    dataString = '$data = array(\\n'\n    const dataCount = Object.keys(parsedQueryString).length\n    if (dataCount === 1 && !parsedQueryString[Object.keys(parsedQueryString)[0]]) {\n      dataString = \"$data = '\" + quote(request.data) + \"';\"\n    } else {\n      let dataIndex = 0\n      for (const key in parsedQueryString) {\n        const value = parsedQueryString[key]\n        dataString += \"    '\" + key + \"' => '\" + quote(value) + \"'\"\n        if (dataIndex < dataCount - 1) {\n          dataString += ',\\n'\n        }\n        dataIndex++\n      }\n      dataString += '\\n);'\n    }\n  }\n  let requestLine = '$response = Requests::' + request.method + '(\\'' + request.url + '\\''\n  requestLine += ', $headers'\n  if (dataString) {\n    requestLine += ', $data'\n  }\n  if (optionsString) {\n    requestLine += ', $options'\n  }\n  requestLine += ');'\n\n  let phpCode = '<?php\\n'\n  phpCode += 'include(\\'vendor/rmccue/requests/library/Requests.php\\');\\n'\n  phpCode += 'Requests::register_autoloader();\\n'\n  phpCode += headerString + '\\n'\n  if (dataString) {\n    phpCode += dataString + '\\n'\n  }\n  if (optionsString) {\n    phpCode += optionsString + '\\n'\n  }\n\n  phpCode += requestLine\n\n  return phpCode + '\\n'\n}\n\nmodule.exports = toPhp\n"]},"metadata":{},"sourceType":"script"}