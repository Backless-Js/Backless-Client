{"ast":null,"code":"var fs = require('fs');\n\nvar path = require('path'); // add bash completions to your\n//  yargs-powered applications.\n\n\nmodule.exports = function (yargs, usage) {\n  var self = {\n    completionKey: 'get-yargs-completions'\n  }; // get a list of completion commands.\n\n  self.getCompletion = function (done) {\n    var completions = [];\n    var current = process.argv[process.argv.length - 1];\n    var previous = process.argv.slice(process.argv.indexOf('--' + self.completionKey) + 1);\n    var argv = yargs.parse(previous); // a custom completion function can be provided\n    // to completion().\n\n    if (completionFunction) {\n      if (completionFunction.length < 3) {\n        var result = completionFunction(current, argv); // promise based completion function.\n\n        if (typeof result.then === 'function') {\n          return result.then(function (list) {\n            process.nextTick(function () {\n              done(list);\n            });\n          }).catch(function (err) {\n            process.nextTick(function () {\n              throw err;\n            });\n          });\n        } // synchronous completion function.\n\n\n        return done(result);\n      } else {\n        // asynchronous completion function\n        return completionFunction(current, argv, function (completions) {\n          done(completions);\n        });\n      }\n    }\n\n    var handlers = yargs.getCommandHandlers();\n\n    for (var i = 0, ii = previous.length; i < ii; ++i) {\n      if (handlers[previous[i]]) {\n        return handlers[previous[i]](yargs.reset());\n      }\n    }\n\n    if (!current.match(/^-/)) {\n      usage.getCommands().forEach(function (command) {\n        if (previous.indexOf(command[0]) === -1) {\n          completions.push(command[0]);\n        }\n      });\n    }\n\n    if (current.match(/^-/)) {\n      Object.keys(yargs.getOptions().key).forEach(function (key) {\n        completions.push('--' + key);\n      });\n    }\n\n    done(completions);\n  }; // generate the completion script to add to your .bashrc.\n\n\n  self.generateCompletionScript = function ($0) {\n    var script = fs.readFileSync(path.resolve(__dirname, '../completion.sh.hbs'), 'utf-8');\n    var name = path.basename($0); // add ./to applications not yet installed as bin.\n\n    if ($0.match(/\\.js$/)) $0 = './' + $0;\n    script = script.replace(/{{app_name}}/g, name);\n    return script.replace(/{{app_path}}/g, $0);\n  }; // register a function to perform your own custom\n  // completions., this function can be either\n  // synchrnous or asynchronous.\n\n\n  var completionFunction = null;\n\n  self.registerFunction = function (fn) {\n    completionFunction = fn;\n  };\n\n  return self;\n};","map":{"version":3,"sources":["/home/marcel/Desktop/CobaProject/GUI backless-js/axsis/node_modules/curlconverter/node_modules/yargs/lib/completion.js"],"names":["fs","require","path","module","exports","yargs","usage","self","completionKey","getCompletion","done","completions","current","process","argv","length","previous","slice","indexOf","parse","completionFunction","result","then","list","nextTick","catch","err","handlers","getCommandHandlers","i","ii","reset","match","getCommands","forEach","command","push","Object","keys","getOptions","key","generateCompletionScript","$0","script","readFileSync","resolve","__dirname","name","basename","replace","registerFunction","fn"],"mappings":"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","sourcesContent":["var fs = require('fs')\nvar path = require('path')\n\n// add bash completions to your\n//  yargs-powered applications.\nmodule.exports = function (yargs, usage) {\n  var self = {\n    completionKey: 'get-yargs-completions'\n  }\n\n  // get a list of completion commands.\n  self.getCompletion = function (done) {\n    var completions = []\n    var current = process.argv[process.argv.length - 1]\n    var previous = process.argv.slice(process.argv.indexOf('--' + self.completionKey) + 1)\n    var argv = yargs.parse(previous)\n\n    // a custom completion function can be provided\n    // to completion().\n    if (completionFunction) {\n      if (completionFunction.length < 3) {\n        var result = completionFunction(current, argv)\n\n        // promise based completion function.\n        if (typeof result.then === 'function') {\n          return result.then(function (list) {\n            process.nextTick(function () { done(list) })\n          }).catch(function (err) {\n            process.nextTick(function () { throw err })\n          })\n        }\n\n        // synchronous completion function.\n        return done(result)\n      } else {\n        // asynchronous completion function\n        return completionFunction(current, argv, function (completions) {\n          done(completions)\n        })\n      }\n    }\n\n    var handlers = yargs.getCommandHandlers()\n    for (var i = 0, ii = previous.length; i < ii; ++i) {\n      if (handlers[previous[i]]) {\n        return handlers[previous[i]](yargs.reset())\n      }\n    }\n\n    if (!current.match(/^-/)) {\n      usage.getCommands().forEach(function (command) {\n        if (previous.indexOf(command[0]) === -1) {\n          completions.push(command[0])\n        }\n      })\n    }\n\n    if (current.match(/^-/)) {\n      Object.keys(yargs.getOptions().key).forEach(function (key) {\n        completions.push('--' + key)\n      })\n    }\n\n    done(completions)\n  }\n\n  // generate the completion script to add to your .bashrc.\n  self.generateCompletionScript = function ($0) {\n    var script = fs.readFileSync(\n      path.resolve(__dirname, '../completion.sh.hbs'),\n      'utf-8'\n    )\n    var name = path.basename($0)\n\n    // add ./to applications not yet installed as bin.\n    if ($0.match(/\\.js$/)) $0 = './' + $0\n\n    script = script.replace(/{{app_name}}/g, name)\n    return script.replace(/{{app_path}}/g, $0)\n  }\n\n  // register a function to perform your own custom\n  // completions., this function can be either\n  // synchrnous or asynchronous.\n  var completionFunction = null\n  self.registerFunction = function (fn) {\n    completionFunction = fn\n  }\n\n  return self\n}\n"]},"metadata":{},"sourceType":"script"}